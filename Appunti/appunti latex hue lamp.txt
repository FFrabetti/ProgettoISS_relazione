\subsection{Hue Lamp Interaction}
L'interazione con la Hue Lamp Philips avviene mediante un'interfaccia di API RESTful\footnote{\url{https://it.wikipedia.org/wiki/Representational_State_Transfer}} fornita dall'apposito bridge.
Prima di interagire con la lampada, è quindi necessario individuare il bridge nella rete ed ottenere uno username. Sempre grazie alla documentazione, apprendiamo che entrambe le operazioni possono essere facilmente svolte con messaggi HTTP: la prima attraverso una GET ad un preciso url (\url{https://discovery.meethue.com/}) , mentre la seconda grazie alle API del bridge individuato con la prima.
Attualmente il nostro sistema simulava la lampada wi-fi con un oggetto mock scritto in Java; ci viene quindi facile sostituirlo mediante un'altra classe Java che funga da adapter per le API del sistema Hue Lamp Philips.
\lstinputlisting[language=Java, firstline=20, lastline=122, firstnumber=1]{../it.unibo.finaltask2018/src/it.unibo.finaltask2018.adapter/hueLampAdapter.java}
Tale classe espone i due metodi statici \codescript{setUp()} e \codescript{setLamp(String state)}: il primo esegue le operazioni per stabilire una connessione col bridge ed ottenere le credenziali, mentre il secondo è un metodo adapter per chiamare le API che permettono di cambiare lo stato della lampadina (on/off/blink).
Dal momento che sia l'interazione con la lampada, sia le operazioni preliminari per individuare l'indirizzo ip del bridge nella rete e per l'ottenimento dello username sono gestite attraverso comunicazione RESTful, abbiamo implementato una classe Java di utilità\footnote{RESTfulClient.java} che, sfruttando un'apposita libreria, semplifichi tali operazioni.
Anche per quanto riguarda la scrittura/lettura dei dati in JSON ci siamo appoggiati ad una libreria.