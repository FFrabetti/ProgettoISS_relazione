/* Generated by AN DISI Unibo */ 
package it.unibo.swag2pa;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractSwag2pa extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractSwag2pa(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/swag2pa/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/swag2pa/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("receivedCmd",receivedCmd);
	    	stateTab.put("detectedBySonar",detectedBySonar);
	    	stateTab.put("cleaning",cleaning);
	    	stateTab.put("detectedByFinal",detectedByFinal);
	    	stateTab.put("handleFront",handleFront);
	    	stateTab.put("avoidMobile",avoidMobile);
	    	stateTab.put("avoidFixRight",avoidFixRight);
	    	stateTab.put("checkDoorRight",checkDoorRight);
	    	stateTab.put("doorFoundRight",doorFoundRight);
	    	stateTab.put("goToPrevLevelRight",goToPrevLevelRight);
	    	stateTab.put("resumeLastPosition",resumeLastPosition);
	    	stateTab.put("avoidFixLeft",avoidFixLeft);
	    	stateTab.put("checkDoorLeft",checkDoorLeft);
	    	stateTab.put("doorFoundLeft",doorFoundLeft);
	    	stateTab.put("goToPrevLevelLeft",goToPrevLevelLeft);
	    	stateTab.put("failure",failure);
	    	stateTab.put("switchDirection",switchDirection);
	    	stateTab.put("givingUp",givingUp);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "swag2pa tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp(getName()+"_init",0);
	     pr.incNumIter(); 	
	    	String myselfName = "init";  
	    	temporaryStr = "\"swag2 start: waiting for start command\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("receivedCmd") }, 
	          new String[]{"true","M","externalcmd" },
	          3600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun receivedCmd = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("receivedCmd",-1);
	    	String myselfName = "receivedCmd";  
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("usercmd(start)");
	    	if( currentMessage != null && currentMessage.msgId().equals("externalcmd") && 
	    		pengine.unify(curT, Term.createTerm("usercmd(CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		//println("WARNING: variable substitution not yet fully implemented " ); 
	    		{//actionseq
	    		temporaryStr = "\"ricevuto start\"";
	    		println( temporaryStr );  
	    		temporaryStr = "startCmd";
	    		addRule( temporaryStr );  
	    		};//actionseq
	    	}
	    	//onMsg 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("usercmd(halt)");
	    	if( currentMessage != null && currentMessage.msgId().equals("externalcmd") && 
	    		pengine.unify(curT, Term.createTerm("usercmd(CMD)")) && 
	    		pengine.unify(curT, Term.createTerm( currentMessage.msgContent() ) )){ 
	    		String parg = "\"ricevuto halt\"";
	    		/* Print */
	    		parg =  updateVars( Term.createTerm("usercmd(CMD)"), 
	    		                    Term.createTerm("usercmd(halt)"), 
	    			    		  	Term.createTerm(currentMessage.msgContent()), parg);
	    		if( parg != null ) println( parg );
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("detectedBySonar") }, 
	          new String[]{" ??startCmd" ,"E","sonarSensor" },
	          800, "init" );//msgTransition
	    }catch(Exception e_receivedCmd){  
	    	 println( getName() + " plan=receivedCmd WARNING:" + e_receivedCmd.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//receivedCmd
	    
	    StateFun detectedBySonar = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("detectedBySonar",-1);
	    	String myselfName = "detectedBySonar";  
	    	temporaryStr = "\"detected by a sonar\"";
	    	println( temporaryStr );  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("sonar(sonar1,D)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonarSensor") && 
	    		pengine.unify(curT, Term.createTerm("sonar(NAME,DISTANCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="sonarDetect(sonar1,D)";
	    			/* AddRule */
	    			parg = updateVars(Term.createTerm("sonar(NAME,DISTANCE)"),  Term.createTerm("sonar(sonar1,D)"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) addRule(parg);	    		  					
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?isCloseTo(sonar1)" )) != null ){
	    	{//actionseq
	    	temporaryStr = "\"close to sonar1\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(clean)", guardVars ).toString();
	    	sendMsg("swagmsg",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	else{ temporaryStr = "\"NOT close to sonar1!\"";
	    	println( temporaryStr );  
	    	}temporaryStr = "sonarDetect(sonar1,D)";
	    	removeRule( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("cleaning") }, 
	          new String[]{"true","M","swagmsg" },
	          800, "init" );//msgTransition
	    }catch(Exception e_detectedBySonar){  
	    	 println( getName() + " plan=detectedBySonar WARNING:" + e_detectedBySonar.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//detectedBySonar
	    
	    StateFun cleaning = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("cleaning",-1);
	    	String myselfName = "cleaning";  
	    	temporaryStr = "\"cleaning\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("handleFront"), stateTab.get("detectedByFinal"), stateTab.get("receivedCmd") }, 
	          new String[]{"true","E","frontSonar", "true","E","sonarSensor", "true","M","externalcmd" },
	          3600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_cleaning){  
	    	 println( getName() + " plan=cleaning WARNING:" + e_cleaning.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//cleaning
	    
	    StateFun detectedByFinal = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("detectedByFinal",-1);
	    	String myselfName = "detectedByFinal";  
	    	temporaryStr = "\"detected by a sonar\"";
	    	println( temporaryStr );  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("sonar(sonar2,D)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonarSensor") && 
	    		pengine.unify(curT, Term.createTerm("sonar(NAME,DISTANCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="sonarDetect(sonar2,D)";
	    			/* AddRule */
	    			parg = updateVars(Term.createTerm("sonar(NAME,DISTANCE)"),  Term.createTerm("sonar(sonar2,D)"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) addRule(parg);	    		  					
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?isCloseTo(sonar2)" )) != null ){
	    	{//actionseq
	    	temporaryStr = "\"close to sonar2, end of cleaning\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(halt)", guardVars ).toString();
	    	sendMsg("swagmsg",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	else{ temporaryStr = "\"NOT close to sonar2!\"";
	    	println( temporaryStr );  
	    	}temporaryStr = "sonarDetect(sonar2,D)";
	    	removeRule( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("init") }, 
	          new String[]{"true","M","swagmsg" },
	          800, "cleaning" );//msgTransition
	    }catch(Exception e_detectedByFinal){  
	    	 println( getName() + " plan=detectedByFinal WARNING:" + e_detectedByFinal.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//detectedByFinal
	    
	    StateFun handleFront = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("handleFront",-1);
	    	String myselfName = "handleFront";  
	    	temporaryStr = "\"handleFront\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"possible mobile obstacle\"";
	    	println( temporaryStr );  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(1000,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "handleFront";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = "\"provo ad avanzare\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("receivedCmd"), stateTab.get("avoidFixRight") }, 
	          new String[]{"true","M","externalcmd", "true","E","frontSonar" },
	          8000, "avoidMobile" );//msgTransition
	    }catch(Exception e_handleFront){  
	    	 println( getName() + " plan=handleFront WARNING:" + e_handleFront.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//handleFront
	    
	    StateFun avoidMobile = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("avoidMobile",-1);
	    	String myselfName = "avoidMobile";  
	    	temporaryStr = "\"avoidMobile\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"ok, ostacolo superato\"";
	    	println( temporaryStr );  
	    	//switchTo cleaning
	        switchToPlanAsNextState(pr, myselfName, "swag2pa_"+myselfName, 
	              "cleaning",false, false, null); 
	    }catch(Exception e_avoidMobile){  
	    	 println( getName() + " plan=avoidMobile WARNING:" + e_avoidMobile.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//avoidMobile
	    
	    StateFun avoidFixRight = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("avoidFixRight",-1);
	    	String myselfName = "avoidFixRight";  
	    	temporaryStr = "\"avoidFixRight\"";
	    	println( temporaryStr );  
	    	parg = "avoidFixTry";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?avoidFixGiveUp" )) != null ){
	    	{//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(giveUpRight)", guardVars ).toString();
	    	sendMsg("swagmsg",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = "\"Raggiunti max tentativi a destra\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	temporaryStr = "\"proviamo a girarci intorno\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"turn right\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"forward\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("failure"), stateTab.get("receivedCmd"), stateTab.get("switchDirection") }, 
	          new String[]{"true","E","frontSonar", "true","M","externalcmd", "true","M","swagmsg" },
	          200, "checkDoorRight" );//msgTransition
	    }catch(Exception e_avoidFixRight){  
	    	 println( getName() + " plan=avoidFixRight WARNING:" + e_avoidFixRight.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//avoidFixRight
	    
	    StateFun checkDoorRight = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("checkDoorRight",-1);
	    	String myselfName = "checkDoorRight";  
	    	temporaryStr = "\"checkDoor\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"stop\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"turn left\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("receivedCmd"), stateTab.get("avoidFixRight") }, 
	          new String[]{"true","M","externalcmd", "true","E","frontSonar" },
	          8000, "doorFoundRight" );//msgTransition
	    }catch(Exception e_checkDoorRight){  
	    	 println( getName() + " plan=checkDoorRight WARNING:" + e_checkDoorRight.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//checkDoorRight
	    
	    StateFun doorFoundRight = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("doorFoundRight",-1);
	    	String myselfName = "doorFoundRight";  
	    	temporaryStr = "\"doorFoundRight\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"forward\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"stop\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"left\"";
	    	println( temporaryStr );  
	    	//switchTo goToPrevLevelRight
	        switchToPlanAsNextState(pr, myselfName, "swag2pa_"+myselfName, 
	              "goToPrevLevelRight",false, false, null); 
	    }catch(Exception e_doorFoundRight){  
	    	 println( getName() + " plan=doorFoundRight WARNING:" + e_doorFoundRight.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doorFoundRight
	    
	    StateFun goToPrevLevelRight = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("goToPrevLevelRight",-1);
	    	String myselfName = "goToPrevLevelRight";  
	    	temporaryStr = "\"goToPrevLevelRight\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?foundFix(C)" )) != null ){
	    	{//actionseq
	    	parg = "decremFoundFix";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	temporaryStr = "\"forward\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"stop\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(initialP)", guardVars ).toString();
	    	sendMsg("swagmsg",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = "\"riprendo la direzione di marcia (RIGHT)\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("receivedCmd"), stateTab.get("cleaning") }, 
	          new String[]{"true","M","externalcmd", "true","M","swagmsg" },
	          200, "goToPrevLevelRight" );//msgTransition
	    }catch(Exception e_goToPrevLevelRight){  
	    	 println( getName() + " plan=goToPrevLevelRight WARNING:" + e_goToPrevLevelRight.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//goToPrevLevelRight
	    
	    StateFun resumeLastPosition = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("resumeLastPosition",-1);
	    	String myselfName = "resumeLastPosition";  
	    	temporaryStr = "\"resume last position\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?foundFix(C)" )) != null ){
	    	{//actionseq
	    	parg = "decremFoundFix";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	temporaryStr = "\"forward\"";
	    	println( temporaryStr );  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "resumeLastPosition";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = "\"stop\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(initialP)", guardVars ).toString();
	    	sendMsg("swagmsg",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = "\"fronteggio l'invalicabile muro\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("receivedCmd"), stateTab.get("avoidFixLeft") }, 
	          new String[]{"true","M","externalcmd", "true","M","swagmsg" },
	          800, "resumeLastPosition" );//msgTransition
	    }catch(Exception e_resumeLastPosition){  
	    	 println( getName() + " plan=resumeLastPosition WARNING:" + e_resumeLastPosition.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//resumeLastPosition
	    
	    StateFun avoidFixLeft = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("avoidFixLeft",-1);
	    	String myselfName = "avoidFixLeft";  
	    	temporaryStr = "\"avoidFixLeft\"";
	    	println( temporaryStr );  
	    	parg = "avoidFixTry";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?avoidFixGiveUp" )) != null ){
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(giveUpLeft)", guardVars ).toString();
	    	sendMsg("swagmsg",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	}
	    	else{ {//actionseq
	    	temporaryStr = "\"proviamo a girarci intorno\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"turn left\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"forward\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("givingUp"), stateTab.get("receivedCmd"), stateTab.get("givingUp") }, 
	          new String[]{"true","E","frontSonar", "true","M","externalcmd", "true","M","swagmsg" },
	          200, "checkDoorLeft" );//msgTransition
	    }catch(Exception e_avoidFixLeft){  
	    	 println( getName() + " plan=avoidFixLeft WARNING:" + e_avoidFixLeft.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//avoidFixLeft
	    
	    StateFun checkDoorLeft = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("checkDoorLeft",-1);
	    	String myselfName = "checkDoorLeft";  
	    	temporaryStr = "\"checkDoorLeft\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"stop\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"turn right\"";
	    	println( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("receivedCmd"), stateTab.get("avoidFixLeft") }, 
	          new String[]{"true","M","externalcmd", "true","E","frontSonar" },
	          8000, "doorFoundLeft" );//msgTransition
	    }catch(Exception e_checkDoorLeft){  
	    	 println( getName() + " plan=checkDoorLeft WARNING:" + e_checkDoorLeft.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//checkDoorLeft
	    
	    StateFun doorFoundLeft = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("doorFoundLeft",-1);
	    	String myselfName = "doorFoundLeft";  
	    	temporaryStr = "\"doorFoundLeft\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"forward\"";
	    	println( temporaryStr );  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "doorFoundLeft";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = "\"stop\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"right\"";
	    	println( temporaryStr );  
	    	//switchTo goToPrevLevelLeft
	        switchToPlanAsNextState(pr, myselfName, "swag2pa_"+myselfName, 
	              "goToPrevLevelLeft",false, false, null); 
	    }catch(Exception e_doorFoundLeft){  
	    	 println( getName() + " plan=doorFoundLeft WARNING:" + e_doorFoundLeft.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//doorFoundLeft
	    
	    StateFun goToPrevLevelLeft = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("goToPrevLevelLeft",-1);
	    	String myselfName = "goToPrevLevelLeft";  
	    	temporaryStr = "\"goToPrevLevelLeft\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?foundFix(C)" )) != null ){
	    	{//actionseq
	    	parg = "decremFoundFix";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	temporaryStr = "\"forward\"";
	    	println( temporaryStr );  
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(500,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "goToPrevLevelLeft";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = "\"stop\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	else{ {//actionseq
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(initialP)", guardVars ).toString();
	    	sendMsg("swagmsg",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = "\"riprendo la direzione di marcia (LEFT)\"";
	    	println( temporaryStr );  
	    	};//actionseq
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"swag2pa_"+myselfName,false,
	          new StateFun[]{stateTab.get("receivedCmd"), stateTab.get("cleaning") }, 
	          new String[]{"true","M","externalcmd", "true","M","swagmsg" },
	          800, "goToPrevLevelLeft" );//msgTransition
	    }catch(Exception e_goToPrevLevelLeft){  
	    	 println( getName() + " plan=goToPrevLevelLeft WARNING:" + e_goToPrevLevelLeft.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//goToPrevLevelLeft
	    
	    StateFun failure = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("failure",-1);
	    	String myselfName = "failure";  
	    	temporaryStr = "\"failure\"";
	    	println( temporaryStr );  
	    	temporaryStr = "\"ruoto di 180\"";
	    	println( temporaryStr );  
	    	//switchTo resumeLastPosition
	        switchToPlanAsNextState(pr, myselfName, "swag2pa_"+myselfName, 
	              "resumeLastPosition",false, false, null); 
	    }catch(Exception e_failure){  
	    	 println( getName() + " plan=failure WARNING:" + e_failure.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//failure
	    
	    StateFun switchDirection = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("switchDirection",-1);
	    	String myselfName = "switchDirection";  
	    	temporaryStr = "\"switchDirection\"";
	    	println( temporaryStr );  
	    	parg = "decremFoundFix";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	temporaryStr = "\"ruoto di 90\"";
	    	println( temporaryStr );  
	    	//switchTo resumeLastPosition
	        switchToPlanAsNextState(pr, myselfName, "swag2pa_"+myselfName, 
	              "resumeLastPosition",false, false, null); 
	    }catch(Exception e_switchDirection){  
	    	 println( getName() + " plan=switchDirection WARNING:" + e_switchDirection.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//switchDirection
	    
	    StateFun givingUp = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("givingUp",-1);
	    	String myselfName = "givingUp";  
	    	temporaryStr = "\"givingUp\"";
	    	println( temporaryStr );  
	    	temporaryStr = "foundFix(X)";
	    	removeRule( temporaryStr );  
	    	//switchTo init
	        switchToPlanAsNextState(pr, myselfName, "swag2pa_"+myselfName, 
	              "init",false, false, null); 
	    }catch(Exception e_givingUp){  
	    	 println( getName() + " plan=givingUp WARNING:" + e_givingUp.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//givingUp
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
