/* Generated by AN DISI Unibo */ 
package it.unibo.swag3;
import it.unibo.qactors.PlanRepeat;
import it.unibo.qactors.QActorContext;
import it.unibo.qactors.StateExecMessage;
import it.unibo.qactors.QActorUtils;
import it.unibo.is.interfaces.IOutputEnvView;
import it.unibo.qactors.action.AsynchActionResult;
import it.unibo.qactors.action.IActorAction;
import it.unibo.qactors.action.IActorAction.ActionExecMode;
import it.unibo.qactors.action.IMsgQueue;
import it.unibo.qactors.akka.QActor;
import it.unibo.qactors.StateFun;
import java.util.Stack;
import java.util.Hashtable;
import java.util.concurrent.Callable;
import alice.tuprolog.Struct;
import alice.tuprolog.Term;
import it.unibo.qactors.action.ActorTimedAction;
public abstract class AbstractSwag3 extends QActor { 
	protected AsynchActionResult aar = null;
	protected boolean actionResult = true;
	protected alice.tuprolog.SolveInfo sol;
	protected String planFilePath    = null;
	protected String terminationEvId = "default";
	protected String parg="";
	protected boolean bres=false;
	protected IActorAction action;
	 
	
		protected static IOutputEnvView setTheEnv(IOutputEnvView outEnvView ){
			return outEnvView;
		}
		public AbstractSwag3(String actorId, QActorContext myCtx, IOutputEnvView outEnvView )  throws Exception{
			super(actorId, myCtx,  
			"./srcMore/it/unibo/swag3/WorldTheory.pl",
			setTheEnv( outEnvView )  , "init");
			this.planFilePath = "./srcMore/it/unibo/swag3/plans.txt";
	  	}
		@Override
		protected void doJob() throws Exception {
			String name  = getName().replace("_ctrl", "");
			mysupport = (IMsgQueue) QActorUtils.getQActor( name ); 
			initStateTable(); 
	 		initSensorSystem();
	 		history.push(stateTab.get( "init" ));
	  	 	autoSendStateExecMsg();
	  		//QActorContext.terminateQActorSystem(this);//todo
		} 	
		/* 
		* ------------------------------------------------------------
		* PLANS
		* ------------------------------------------------------------
		*/    
	    //genAkkaMshHandleStructure
	    protected void initStateTable(){  	
	    	stateTab.put("handleToutBuiltIn",handleToutBuiltIn);
	    	stateTab.put("init",init);
	    	stateTab.put("startCleaning",startCleaning);
	    	stateTab.put("forwardCleaning",forwardCleaning);
	    	stateTab.put("detectedByFinal",detectedByFinal);
	    	stateTab.put("leftTurn",leftTurn);
	    	stateTab.put("waitForGodot",waitForGodot);
	    	stateTab.put("backCleaning",backCleaning);
	    	stateTab.put("rightTurn",rightTurn);
	    	stateTab.put("end",end);
	    }
	    StateFun handleToutBuiltIn = () -> {	
	    	try{	
	    		PlanRepeat pr = PlanRepeat.setUp("handleTout",-1);
	    		String myselfName = "handleToutBuiltIn";  
	    		println( "swag3 tout : stops");  
	    		repeatPlanNoTransition(pr,myselfName,"application_"+myselfName,false,false);
	    	}catch(Exception e_handleToutBuiltIn){  
	    		println( getName() + " plan=handleToutBuiltIn WARNING:" + e_handleToutBuiltIn.getMessage() );
	    		QActorContext.terminateQActorSystem(this); 
	    	}
	    };//handleToutBuiltIn
	    
	    StateFun init = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("init",-1);
	    	String myselfName = "init";  
	    	temporaryStr = "\"swag3 start cleaning\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(w(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	//switchTo startCleaning
	        switchToPlanAsNextState(pr, myselfName, "swag3_"+myselfName, 
	              "startCleaning",false, false, null); 
	    }catch(Exception e_init){  
	    	 println( getName() + " plan=init WARNING:" + e_init.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//init
	    
	    StateFun startCleaning = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("startCleaning",-1);
	    	String myselfName = "startCleaning";  
	    	parg = "increment(roomLen)";
	    	//QActorUtils.solveGoal(myself,parg,pengine );  //sets currentActionResult		
	    	solveGoal( parg ); //sept2017
	    	//bbb
	     msgTransition( pr,myselfName,"swag3_"+myselfName,false,
	          new StateFun[]{stateTab.get("leftTurn") }, 
	          new String[]{"true","E","frontSonar" },
	          200, "startCleaning" );//msgTransition
	    }catch(Exception e_startCleaning){  
	    	 println( getName() + " plan=startCleaning WARNING:" + e_startCleaning.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//startCleaning
	    
	    StateFun forwardCleaning = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("forwardCleaning",-1);
	    	String myselfName = "forwardCleaning";  
	    	temporaryStr = "\"cleaning forward\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(d(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(w(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	//bbb
	     msgTransition( pr,myselfName,"swag3_"+myselfName,false,
	          new StateFun[]{stateTab.get("detectedByFinal") }, 
	          new String[]{"true","E","sonarSensor" },
	          3600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_forwardCleaning){  
	    	 println( getName() + " plan=forwardCleaning WARNING:" + e_forwardCleaning.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//forwardCleaning
	    
	    StateFun detectedByFinal = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("detectedByFinal",-1);
	    	String myselfName = "detectedByFinal";  
	    	temporaryStr = "\"detected by a sonar\"";
	    	println( temporaryStr );  
	    	//onEvent 
	    	setCurrentMsgFromStore(); 
	    	curT = Term.createTerm("sonar(sonar2,D)");
	    	if( currentEvent != null && currentEvent.getEventId().equals("sonarSensor") && 
	    		pengine.unify(curT, Term.createTerm("sonar(NAME,DISTANCE)")) && 
	    		pengine.unify(curT, Term.createTerm( currentEvent.getMsg() ) )){ 
	    			String parg="sonarDetect(sonar2,D)";
	    			/* AddRule */
	    			parg = updateVars(Term.createTerm("sonar(NAME,DISTANCE)"),  Term.createTerm("sonar(sonar2,D)"), 
	    				    		  					Term.createTerm(currentEvent.getMsg()), parg);
	    			if( parg != null ) addRule(parg);	    		  					
	    	}
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?isCloseTo(sonar2)" )) != null ){
	    	{//actionseq
	    	temporaryStr = "\"close to sonar2\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"cmd(CMD)","cmd(halt)", guardVars ).toString();
	    	sendMsg("swagmsg",getNameNoCtrl(), QActorContext.dispatch, temporaryStr ); 
	    	};//actionseq
	    	}
	    	else{ temporaryStr = "\"NOT close to sonar2\"";
	    	println( temporaryStr );  
	    	}temporaryStr = "sonarDetect(sonar2,D)";
	    	removeRule( temporaryStr );  
	    	//bbb
	     msgTransition( pr,myselfName,"swag3_"+myselfName,false,
	          new StateFun[]{stateTab.get("end") }, 
	          new String[]{"true","M","swagmsg" },
	          800, "leftTurn" );//msgTransition
	    }catch(Exception e_detectedByFinal){  
	    	 println( getName() + " plan=detectedByFinal WARNING:" + e_detectedByFinal.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//detectedByFinal
	    
	    StateFun leftTurn = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("leftTurn",-1);
	    	String myselfName = "leftTurn";  
	    	temporaryStr = "\"left turn\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(h(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(a(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(w(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(400,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "leftTurn";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(h(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	//bbb
	     msgTransition( pr,myselfName,"swag3_"+myselfName,false,
	          new StateFun[]{}, 
	          new String[]{},
	          800, "waitForGodot" );//msgTransition
	    }catch(Exception e_leftTurn){  
	    	 println( getName() + " plan=leftTurn WARNING:" + e_leftTurn.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//leftTurn
	    
	    StateFun waitForGodot = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("waitForGodot",-1);
	    	String myselfName = "waitForGodot";  
	    	temporaryStr = "\"waiting for Godot...\"";
	    	println( temporaryStr );  
	    	if( (guardVars = QActorUtils.evalTheGuard(this, " !?counter(roomLen,C)" )) != null ){
	    	temporaryStr = "roomLen(C)";
	    	temporaryStr = QActorUtils.substituteVars(guardVars,temporaryStr);
	    	println( temporaryStr );  
	    	}
	    	//bbb
	     msgTransition( pr,myselfName,"swag3_"+myselfName,false,
	          new StateFun[]{stateTab.get("backCleaning") }, 
	          new String[]{"true","E","frontSonar" },
	          2000, "backCleaning" );//msgTransition
	    }catch(Exception e_waitForGodot){  
	    	 println( getName() + " plan=waitForGodot WARNING:" + e_waitForGodot.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//waitForGodot
	    
	    StateFun backCleaning = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("backCleaning",-1);
	    	String myselfName = "backCleaning";  
	    	temporaryStr = "\"cleaning back\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(a(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(w(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	//bbb
	     msgTransition( pr,myselfName,"swag3_"+myselfName,false,
	          new StateFun[]{stateTab.get("rightTurn") }, 
	          new String[]{"true","E","frontSonar" },
	          3600000, "handleToutBuiltIn" );//msgTransition
	    }catch(Exception e_backCleaning){  
	    	 println( getName() + " plan=backCleaning WARNING:" + e_backCleaning.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//backCleaning
	    
	    StateFun rightTurn = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("rightTurn",-1);
	    	String myselfName = "rightTurn";  
	    	temporaryStr = "\"right turn\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(h(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(d(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(w(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	//delay  ( no more reactive within a plan)
	    	aar = delayReactive(400,"" , "");
	    	if( aar.getInterrupted() ) curPlanInExec   = "rightTurn";
	    	if( ! aar.getGoon() ) return ;
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(h(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	//bbb
	     msgTransition( pr,myselfName,"swag3_"+myselfName,false,
	          new StateFun[]{}, 
	          new String[]{},
	          800, "forwardCleaning" );//msgTransition
	    }catch(Exception e_rightTurn){  
	    	 println( getName() + " plan=rightTurn WARNING:" + e_rightTurn.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//rightTurn
	    
	    StateFun end = () -> {	
	    try{	
	     PlanRepeat pr = PlanRepeat.setUp("end",-1);
	    	String myselfName = "end";  
	    	temporaryStr = "\"end\"";
	    	println( temporaryStr );  
	    	temporaryStr = QActorUtils.unifyMsgContent(pengine,"moveRobot(CMD)","moveRobot(h(1))", guardVars ).toString();
	    	sendExtMsg("moveRobot","robotnode", "ctxVirtualRobotNode", QActorContext.dispatch, temporaryStr ); 
	    	repeatPlanNoTransition(pr,myselfName,"swag3_"+myselfName,false,false);
	    }catch(Exception e_end){  
	    	 println( getName() + " plan=end WARNING:" + e_end.getMessage() );
	    	 QActorContext.terminateQActorSystem(this); 
	    }
	    };//end
	    
	    protected void initSensorSystem(){
	    	//doing nothing in a QActor
	    }
	
	}
