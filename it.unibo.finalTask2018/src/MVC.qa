System mvc  

Event temperature : temperature(T)	
Event clock : clock(H,M) 
Dispatch cmd : cmd (X)

Event moveRobot : moveRobot(C)

Event changeModel : changeModelItem( TYPE, CATEG, NAME, VALUE )
Event ctrlEvent   : ctrlEvent( CATEG, NAME,CMD   ) 	//CMD depends on CATEG/NAME

Event inputCtrlEvent  : inputEvent( CATEG, NAME, VALUE )	 
Event outputCtrlEvent : outputEvent( DATA )	//DATA : integer

Context ctxMvc ip [ host="localhost"  port=8019 ]  // -httpserver 
EventHandler evadapter for temperature,clock  { //maps a temperature, clock and ctrlEvent into a inputCtrlEvent
emit inputCtrlEvent fromContent temperature( T ) to inputEvent( temperature, t1, T );
emit inputCtrlEvent fromContent clock( H,M ) to inputEvent( clock, c1, h(H,M) )
//emit inputCtrlEvent fromContent cmd(X) to inputEvent(robot , r1, X)

};
/*
 * CONTROL model-based
 * works by reacting to inputCtrlEvent  emitted by a change of a sensor model
 * performs ACTIONS that change the model of some sensor/actuator resource  
 * and activates changedModelAction/3 that performs an action for the world
 */
QActor mvccontroller context ctxMvc {
Rules{ //The model is in the theory resourceModel. 
	   //Here we write the actions to be performs when the model changes.
	   //The change of the temperature t1 could modify a Led
	limitTemperatureValue( 25 ).
	changedModelAction( temperature, t1, V  ):-
			limitTemperatureValue( MAX ), 
 		    eval( ge, V , MAX ),   
 		    emitevent( ctrlEvent, ctrlEvent(control,ctrl1,h)).		      			
 	
 	changedModelAction(clock,c1,T):-
 			eval(lt,T,7),
 		    emitevent( ctrlEvent, ctrlEvent(control,ctrl1,h)).		      			
 	changedModelAction(clock,c1,T):-
 			eval(gt,T,10),
 		    emitevent( ctrlEvent, ctrlEvent(control,ctrl1,h)).		      			
 	
 	//se cambia il modello del robot
 	changedModelAction(robot,R,CMD):-
 			emitevent( ctrlEvent, ctrlEvent(robot,R,CMD)), fail.	
 	changedModelAction(robot,R, w(X)):-
 			changeModelItem(led,l1,blink).		
 	changedModelAction(robot,R, s(X)):-
 			changeModelItem(led,l1,blink).
 	changedModelAction(robot,R, h(X)):-
 			changeModelItem(led,l1,noblink).
 	
 	//Se cambia il modello del led		
 	changedModelAction(led,L,X):-
 			emitevent(ctrlEvent,ctrlEvent(led,L,X)).
 }
	Plan init normal [         
		demo consult("./resourceModel.pl");  //contains the models and related rules
   		println( qacontrol(starts)  )   
   	]
   	switchTo waitForInputEvent      
 
    Plan waitForInputEvent[  ]  
    transition stopAfter 6000000 
     	whenEvent inputCtrlEvent -> handleInputEvent,
     	whenMsg cmd -> handleCmd
    finally repeatPlan	
       
    Plan handleInputEvent resumeLastPlan [   
//    	demo a;
     	printCurrentEvent;  
    	onEvent inputCtrlEvent : inputEvent( CATEG, NAME, VALUE ) ->  //change the model
    		demo changeModelItem( CATEG, NAME, VALUE )
    ]
    
    Plan handleCmd resumeLastPlan[
    	onMsg cmd : cmd(X) -> println(ricevuto(X));
    	onMsg cmd : cmd(X) -> demo changeModelItem(robot,r1,X)
    ]
}

//QActor robotmock context ctxMvc -pubsub{
//	Plan init normal [         
//   		println("robot mock");
//   		delay 1000;
//   		forward mvccontroller -m cmd : cmd(a(1))
//   	]
//   	switchTo waitForCommand     
//  
//    Plan waitForCommand[  ]  
//    transition stopAfter 100000 
//     	whenEvent ctrlEvent -> handleCmd
//    finally repeatPlan	
//   	 
//	Plan handleCmd resumeLastPlan[
////  		printCurrentEvent;
////		onEvent ctrlEvent : ctrlEvent(control, ctrl1, C)  -> emit moveRobot : moveRobot(C)
//	]
//}