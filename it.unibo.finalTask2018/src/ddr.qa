System finalTask2018            

Dispatch moveRobot : moveRobot(CMD)

Event frontSonar : sonar(DISTANCE)
Event sonarSensor : sonar(NAME, DISTANCE)	// da sonar virtuali

Context ctxDdr ip [ host="localhost" port=8882 ]

QActor ddr context ctxDdr {   
	Plan init normal [       
	    println("ddr start");
	    javaRun it.unibo.finalTask2018.adapter.robotAdapter.setUpEnvironment()
  	]
    switchTo waitForCmd        
		
   	Plan waitForCmd[
   		println("ddr waiting for commands")
   	]  
  	transition stopAfter 3600000 
 		whenMsg moveRobot -> execMove 
   	finally repeatPlan    
	   
  	Plan execMove resumeLastPlan[     
     	onMsg moveRobot : moveRobot( h(X) ) -> javaRun it.unibo.finalTask2018.adapter.robotAdapter.robotStop();
  		onMsg moveRobot : moveRobot( w(X) ) -> javaRun it.unibo.finalTask2018.adapter.robotAdapter.robotForward();
    	onMsg moveRobot : moveRobot( s(X) ) -> javaRun it.unibo.finalTask2018.adapter.robotAdapter.robotBackward();
  		onMsg moveRobot : moveRobot( a(X) ) -> javaRun it.unibo.finalTask2018.adapter.robotAdapter.robotLeft();
   		onMsg moveRobot : moveRobot( d(X) ) -> javaRun it.unibo.finalTask2018.adapter.robotAdapter.robotRight()
   	]
}

QActor testerrobot context ctxDdr {
	Plan init normal [
		println("testerrobot start");
		delay 2000;
		forward ddr -m moveRobot : moveRobot(w(1));
		delay 2000;
		forward ddr -m moveRobot : moveRobot(h(1));
		delay 2000;
		forward ddr -m moveRobot : moveRobot(s(1));
		delay 2000;
		forward ddr -m moveRobot : moveRobot(a(1));
		delay 2000;
		forward ddr -m moveRobot : moveRobot(d(1))
	]
}
