System ledMockGui

//la parte commentata è relativa allo stile usato dal file del prof con un altro tipo di evento (ctrlEvent)

Event ctrlEvent   : ctrlEvent( CATEG, NAME,CMD   ) 	//CMD depends on CATEG/NAME
//Event blinkCmd : blinkCmd(STATE)

Context ctxLedMockGui ip [ host="localhost"   port=8039 ]
Context ctxMvc ip [ host="localhost"  port=8019 ] -standalone 

QActor ledmockgui context ctxLedMockGui{
	Plan init normal [         
   		println( ledmockgui(starts)  ) ;
   		javaRun it.unibo.custom.gui.customBlsGui.createCustomLedGui()  ;
   		//lampeggia per prova
   		delay 1000;
   		javaRun it.unibo.custom.gui.customBlsGui.setLed("on");
   		delay 1000;
   		javaRun it.unibo.custom.gui.customBlsGui.setLed("off")
   	]
   	switchTo waitForCommand     
  
    Plan waitForCommand[  ]  
    transition stopAfter 6000000 
     	whenEvent ctrlEvent -> handleCmd
//     	whenEvent blinkCmd -> handleCmd
    finally repeatPlan	
   	 
	Plan handleCmd resumeLastPlan[
 		printCurrentEvent;
//		onEvent blinkCmd : blinkCmd(on) -> javaRun it.unibo.custom.gui.customBlsGui.blinkLed("on");
//		onEvent blinkCmd : blinkCmd(off) -> javaRun it.unibo.custom.gui.customBlsGui.blinkLed("off")
		onEvent ctrlEvent : ctrlEvent(led, l1, blink)  -> javaRun it.unibo.custom.gui.customBlsGui.blinkLed("on");
		onEvent ctrlEvent : ctrlEvent(led, l1, noblink)  -> javaRun it.unibo.custom.gui.customBlsGui.blinkLed("off")
	]
}

//QActor testeventemitter context ctxLedMockGui {
//	Plan init normal [         
//      	delay 5000;
//   		emit ctrlEvent : ctrlEvent(leds, led1, blink);
////   		emit blinkCmd: blinkCmd(on);
//   		println("Parte a blinkare");
//		delay 10000;
//		emit ctrlEvent : ctrlEvent(leds, led1, noblink);
////		emit blinkCmd: blinkCmd(off);
//		println("smette di blinkare")
//]
//   	finally repeatPlan 3
// }