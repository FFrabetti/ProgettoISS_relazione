System finalTask2018 
 
Dispatch cmd : cmd(X)
Event usercmd : usercmd(X)
Event temperature : temperature(T)	
Event clock : clock(H,M) 
Event frontSonar : sonar(DISTANCE)
Event sonarSensor : sonar(NAME,DISTANCE)
Event moveRobot : moveRobot(C)
Event blinkCmd : blinkCmd(STATE)
Event ctrlEvent : ctrlEvent(CATEG,NAME,CMD)
Event inputCtrlEvent : inputEvent(CATEG,NAME,VALUE)

Context ctxApplPA ip [ host="localhost"  port=8018 ] -httpserver
EventHandler evadapter for temperature,clock  { //maps temperature and clock into inputCtrlEvent
	emit inputCtrlEvent fromContent temperature( T ) to inputEvent( temperature,t1,T );
	emit inputCtrlEvent fromContent clock( H,M ) to inputEvent( clock, c1, h(H,M) )
};
EventHandler evled for ctrlEvent  { // filter ctrlEvent by CATEGORY and NAME
	emit blinkCmd fromContent ctrlEvent( led, l1, blink ) to blinkCmd(on);
	emit blinkCmd fromContent ctrlEvent( led, l1, noblink ) to blinkCmd(off)
};

// -------------------------- CONTROLLER --------------------------
QActor controllerpa context ctxApplPA {
Rules{ //The model is in the theory resourceModel. 

	//fatti
	limitTemperatureValue( 25 ).
	timeInterval(h(7,0),h(10,0)).
	
	//se cambia il modello della temperatura
	//	R-TempOk: fermo il robot se temperatura >= limite
	changedModelAction( temperature, t1, V  ):-
			limitTemperatureValue( MAX ), 
			eval( ge, V , MAX ),   
			changeModelItem(robot,r1,h(0)).		      			

 	//se cambia il modello del clock
 	//	R-TimeOk: fermo il robot se il tempo non e' nell'intervallo
 	changedModelAction(clock,c1,h(HC,MC)):-
 			non(inTime(HC,MC)),
 			changeModelItem(robot,r1,h(0)).
 			 	
 	//se cambia il modello del robot 	
 	changedModelAction(robot,R,CMD):-
 			emitevent(ctrlEvent, ctrlEvent(robot,R,CMD)), fail.	
 	changedModelAction(robot,R, w(X)):-
 			changeModelItem(led,l1,blink).		
 	changedModelAction(robot,R, s(X)):-
 			changeModelItem(led,l1,blink).
 	changedModelAction(robot,R, h(X)):-
 			changeModelItem(led,l1,noblink).
 	//dopo una svolta il modello deve risultare fermo
 	changedModelAction(robot,R, a(X)):-
 			changeModelItem(robot,R,h(X)).		
 	changedModelAction(robot,R, d(X)):-
 			changeModelItem(robot,R,h(X)).
 	
 	//se cambia il modello del led		
 	changedModelAction(led,L,X):-
 			emitevent(ctrlEvent,ctrlEvent(led,L,X)).
 	
 	//utility: restituisce vero se il primo tempo e' precedente al secondo		
 	timeBefore(H1,_,H2,_):-
 			eval(lt,H1,H2),!.
 	timeBefore(H,M1,H,M2):-
 			eval(lt,M1,M2).
 	
 	//vero se HC,MC e' dentro all'intervallo di tempo consentito		
 	inTime(HC,MC):-
 			timeInterval(h(H1,M1),h(H2,M2)),
 			timeBefore(H1,M1,HC,MC),
 			timeBefore(HC,MC,H2,M2).
 			
 	//possibilita' di muovere il robot (R-TempOk e R-TimeOk)
 	canMove:-
 			limitTemperatureValue(MAX),
 			getModelItem(sensor,temperature,t1,T),
 			eval(lt,T,MAX),
 			getModelItem(sensor,clock,c1,h(HC,MC)),
 			inTime(HC,MC).
 			
 	//R-TempOk e R-TimeOk: cambio il modello solo se il robot puo' muoversi
 	changeRobotModel(CMD):-
 			canMove,
 			changeModelItem(robot,r1,CMD).		
}
 
	Plan init normal [         
		demo consult("./resourceModel.pl");  //contains the models and related rules
   		println( qacontrol(starts)  )   
   	]
   	switchTo waitForInputEvent      
 
    Plan waitForInputEvent[
    	[ !? getModelItem(robots, robot, r1, VALUE) ] println(model(r1, VALUE));
//    	[ !? getModelItem(actuator, led, l1, VALUE) ] println(model(l1, VALUE));
    	[ !? getModelItem(sensor, temperature, t1, VALUE) ] println(model(t1, VALUE));
    	[ !? getModelItem(sensor, clock, c1, VALUE) ] println(model(c1, VALUE));
    	println("---------------------------------------")
    ]  
    transition stopAfter 6000000 
     	whenEvent inputCtrlEvent -> handleInputEvent,
     	whenMsg cmd -> handleCmd
    finally repeatPlan	
       
    Plan handleInputEvent resumeLastPlan [
     	printCurrentEvent;
    	onEvent inputCtrlEvent : inputEvent( CATEG, NAME, VALUE ) ->  //change the model
    		demo changeModelItem( CATEG, NAME, VALUE )
    ]
    
    Plan handleCmd resumeLastPlan[
    	onMsg cmd : cmd(X) -> println(ricevuto(X));
    	onMsg cmd : cmd(X) -> demo changeRobotModel(X)
    ]
}
// -------------------------- CONTROLLER --------------------------

// -------------------------- SOFTWARE AGENT --------------------------
QActor swagpa context ctxApplPA {
	Rules{
		// for testing
		isClose :-
			sonarDetect(_,D),
			eval(gt,D,0),!,
			eval(lt,D,5).
		
		isClose :-
			sonarDetect(_,D),
			eval(minus,0,D,R),
			eval(lt,R,5).
	}	

	Plan init normal [         
   		println("swag start")
   	]
   	switchTo waitForSonar   // testing  
  
    Plan waitForSonar[  ]  
    transition stopAfter 3600000 
     	whenEvent frontSonar -> handleFront,
     	whenEvent sonarSensor -> handleSensor
    finally repeatPlan	
   	 
	Plan handleFront resumeLastPlan[
  		printCurrentEvent;
		onEvent frontSonar : sonar(D) -> forward controllerpa -m cmd : cmd(h(0))
	]
	
	Plan handleSensor resumeLastPlan[
  		printCurrentEvent;
  		// testing: robot close to sonars makes some moves
		onEvent sonarSensor : sonar(N,D) -> addRule sonarDetect(N,D);
		[ !? isClose ] {
			forward controllerpa -m cmd : cmd(d(0));
			delay 250;
			forward controllerpa -m cmd : cmd(d(0));
			delay 250;
			forward controllerpa -m cmd : cmd(d(0));
			delay 250;
			forward controllerpa -m cmd : cmd(d(0));
			delay 250;
			forward controllerpa -m cmd : cmd(s(0));
			delay 250;
			forward controllerpa -m cmd : cmd(h(0))
		};
		[ ?? sonarDetect(N,D) ] println( removing(N,D) )
	]
}
// -------------------------- SOFTWARE AGENT --------------------------

// -------------------------- HUMAN OPERATOR --------------------------
QActor humanoperatorpa context ctxApplPA {
	
	Plan init normal [
		println("humanOperator start")
	]
	switchTo waitForUserCmd
	
	Plan waitForUserCmd [ ]
	transition stopAfter 3600000
		whenEvent usercmd -> sendCmd
	finally repeatPlan

	Plan sendCmd resumeLastPlan [
		onEvent usercmd : usercmd( robotgui(CMD) ) -> println(robotgui(CMD));
		onEvent usercmd : usercmd( robotgui(CMD) ) -> forward controllerpa -m cmd : cmd(CMD)
	]
}
// -------------------------- HUMAN OPERATOR --------------------------

// -------------------------- CLOCK AGENT --------------------------
QActor clockagentpa context ctxApplPA {
	Plan init normal [
		println("clockAgent start");
		
		javaRun it.unibo.finalTask2018.adapter.clockAdapter.initGUI()
	]
}
// -------------------------- CLOCK AGENT --------------------------

// -------------------------- TEMPERATURE AGENT --------------------------
QActor thermoagentpa context ctxApplPA {	
	Plan init normal [
		println("thermoAgent start");
		
		javaRun it.unibo.finalTask2018.adapter.thermoAdapter.initGUI()
	]
}
// -------------------------- TEMPERATURE AGENT --------------------------

// -------------------------- HUE LAMP AGENT --------------------------
QActor huelampagentpa context ctxApplPA {
	Plan init normal [         
   		println("hueLampAgent start");

   		javaRun it.unibo.custom.gui.customBlsGui.createCustomLedGui();
   		//lampeggia per prova
   		delay 1000;
   		javaRun it.unibo.custom.gui.customBlsGui.setLed("on");
   		delay 1000;
   		javaRun it.unibo.custom.gui.customBlsGui.setLed("off")
   	]
   	switchTo waitForCommand     
  
    Plan waitForCommand[ ]
    transition stopAfter 6000000 
     	whenEvent blinkCmd -> handleCmd
    finally repeatPlan	
   	 
	Plan handleCmd resumeLastPlan[
 		printCurrentEvent;
		onEvent blinkCmd : blinkCmd(on) -> javaRun it.unibo.custom.gui.customBlsGui.blinkLed("on");
		onEvent blinkCmd : blinkCmd(off) -> javaRun it.unibo.custom.gui.customBlsGui.blinkLed("off")
	]
}
// -------------------------- HUE LAMP AGENT --------------------------