System finalTask2018            

Event frontSonar : sonar(DISTANCE)
Dispatch moveRobot : moveRobot(CMD)

Event lightCmd : lightCmd(STATE)
Event ctrlEvent : ctrlEvent(CATEG,NAME,CMD)
Event local_robotCmd : moveRobot(CMD)

Context ctxRealRobotMock ip [ host="localhost" port=8866 ]
EventHandler evhrealmock for ctrlEvent -print {
	emit local_robotCmd fromContent ctrlEvent(robot,r1,CMD) to moveRobot(CMD)
};
EventHandler evhrealmockbroker for local_robotCmd {
	forwardEvent realrobotmock -m moveRobot		// stesso payload
};

Context ctxApplPA ip [ host="localhost" port=8018 ] -standalone 

QActor realrobotmock context ctxRealRobotMock {
	Plan init normal [
		println("realrobotmock start");
		javaRun it.unibo.finalTask2018.adapter.robotAdapter.useImpl("MockRobot");
		javaRun it.unibo.finalTask2018.adapter.robotAdapter.setUpEnvironment()
	]
	switchTo waitForCmd
	
	Plan waitForCmd [
		println("realrobotmock waiting for commands")
	]
	transition stopAfter 3600000
		whenMsg moveRobot -> execMove
	finally repeatPlan

	Plan execMove resumeLastPlan [
		onMsg moveRobot : moveRobot(h(X)) -> javaRun it.unibo.finalTask2018.adapter.robotAdapter.robotStop();
		onMsg moveRobot : moveRobot(w(X)) -> javaRun it.unibo.finalTask2018.adapter.robotAdapter.robotForward();
		onMsg moveRobot : moveRobot(s(X)) -> javaRun it.unibo.finalTask2018.adapter.robotAdapter.robotBackward();
		onMsg moveRobot : moveRobot(a(X)) -> javaRun it.unibo.finalTask2018.adapter.robotAdapter.robotLeft();
		onMsg moveRobot : moveRobot(d(X)) -> javaRun it.unibo.finalTask2018.adapter.robotAdapter.robotRight()
	]
}

QActor ledrobotmock context ctxRealRobotMock {
	Plan init normal [
		javaRun it.unibo.finalTask2018.adapter.lampAdapter.init()
	]
	transition stopAfter 3600000
		whenEvent lightCmd -> handleCmd
	finally repeatPlan
	
	Plan handleCmd resumeLastPlan [
		onEvent lightCmd : lightCmd(CMD) -> javaRun it.unibo.finalTask2018.adapter.lampAdapter.setLamp(CMD)
	]
}
