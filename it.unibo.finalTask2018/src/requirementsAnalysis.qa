System finalTask2018

Event clock : clock(H,M)
Event temperature : temperature(T)
Event frontSonar : sonar(DISTANCE)
Event sonarSensor : sonar(NAME, DISTANCE)
Event blinkCmd : blinkCmd(STATE)

Dispatch cmd : cmd(X)
Dispatch moveRobot : moveRobot(CMD)

Context ctxReqAnalysis ip [host="localhost" port=8888] -httpserver
Context ctxDdr ip [ host="localhost" port=8882 ] -standalone 

// -------------------------- HUE LAMP AGENT --------------------------
// Event blinkCmd : blinkCmd(STATE)
QActor huelampagentra context ctxReqAnalysis {
	Plan init normal [ 
		println("hueLampAgent start")
	]
	switchTo waitForEvents 
	
	Plan waitForEvents [
		println("hueLampAgent waiting for events")
	]
	transition stopAfter 3600000
		whenEvent blinkCmd -> commandLed
	
	Plan commandLed [
		onEvent blinkCmd : blinkCmd( on ) 	-> javaRun it.unibo.finalTask2018.adapter.hueAdapter.blinking("on");
		onEvent blinkCmd : blinkCmd ( off ) -> javaRun it.unibo.finalTask2018.adapter.hueAdapter.blinking("off")
	]
	switchTo waitForEvents
}
// -------------------------- HUE LAMP AGENT --------------------------

// -------------------------- TEMPERATURE AGENT --------------------------
// Event temperature : temperature(T)
QActor temperatureagentra context ctxReqAnalysis {
	Plan init normal [
		println("temperatureAgent start")
	]
	switchTo checkTemperature 
	
	Plan checkTemperature [
		delay 5000;
		println("temperatureAgent checking temperature");
		javaRun it.unibo.finalTask2018.adapter.temperatureAdapter.getTemperature();
		[?? currentTemp(T)] emit temperature : temperature(T)
	]
	finally repeatPlan
}
// -------------------------- TEMPERATURE AGENT --------------------------

// -------------------------- CLOCK AGENT --------------------------
// Event clock : clock(H,M)
QActor clockagentra context ctxReqAnalysis {
	Plan init normal [ 
		println("clockAgent start")
	]
	switchTo checkTime
	
	Plan checkTime [
		delay 6000; // for testing
		// delay 60000;
		println("clockAgent checking time");
		javaRun it.unibo.finalTask2018.adapter.clockAdapter.getTime();
		[?? currentTime(H,M)] emit clock : clock(H,M)
	]
	finally repeatPlan
}
// -------------------------- CLOCK AGENT --------------------------

// -------------------------- HUMAN OPERATOR --------------------------
// Dispatch cmd : cmd(X)
QActor humanoperatorra context ctxReqAnalysis {
	Plan init normal [
		println("humanOperator start")
	]
	switchTo sendCmd
	
	Plan sendCmd [
		// for testing
		delay 400;
		forward applra -m cmd : cmd(w(X));
		delay 400;
		forward applra -m cmd : cmd(d(X))
	]
}
// -------------------------- HUMAN OPERATOR --------------------------

// -------------------------- APPLICATION LOGIC --------------------------
QActor applra context ctxReqAnalysis {
	Plan init normal[
		println("appl start")
	]
	switchTo waitForCmd
	
	Plan waitForCmd[]
	transition stopAfter 60000
		whenEvent clock : clock(h(H,M)) do printCurrentEvent,
		whenEvent sonarSensor : sonar(N,D) do printCurrentEvent,
		whenEvent temperature -> testHue,
		whenMsg cmd -> msgReceived
	finally repeatPlan
	
	Plan testHue resumeLastPlan [
		emit blinkCmd : blinkCmd(on);
		delay 1000;
		emit blinkCmd : blinkCmd(off)
	]
	
	Plan msgReceived resumeLastPlan[
		onMsg cmd: cmd(X) -> sendto ddr in ctxDdr -m moveRobot : moveRobot(X)
	]
}
// -------------------------- APPLICATION LOGIC --------------------------
