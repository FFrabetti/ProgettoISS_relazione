System finalTask2018

Event clock : clock(H,M)
Event temperature : temperature(T)
Event frontSonar : sonar(DISTANCE)
Event sonarSensor : sonar(NAME,DISTANCE)
Event lightCmd : lightCmd(CMD)
Dispatch cmd : cmd(CMD)
Event robotCmd : moveRobot(CMD) // Dispatch moveRobot : moveRobot(CMD)

Context ctxReqAnalysis ip [ host="localhost" port=8888 ] -httpserver
//Context ctxDdr ip [ host="localhost" port=8882 ] -standalone 

// -------------------------- HUE LAMP AGENT --------------------------
// Event lightCmd : lightCmd(CMD)
QActor huelampagentra context ctxReqAnalysis {
	Plan init normal [ 
		println("hueLampAgent start")
	]
	switchTo waitForEvents 
	
	Plan waitForEvents [
		println("hueLampAgent waiting for events")
	]
	transition stopAfter 3600000
		whenEvent lightCmd -> commandLamp
	finally repeatPlan
	
	Plan commandLamp resumeLastPlan [
		onEvent lightCmd : lightCmd( blink )-> javaRun it.unibo.finalTask2018.ra.hueAdapter.setLight("blink");
		onEvent lightCmd : lightCmd( on ) 	-> javaRun it.unibo.finalTask2018.ra.hueAdapter.setLight("on");
		onEvent lightCmd : lightCmd ( off ) -> javaRun it.unibo.finalTask2018.ra.hueAdapter.setLight("off")
	]
}
// -------------------------- HUE LAMP AGENT --------------------------

// -------------------------- TEMPERATURE AGENT --------------------------
// Event temperature : temperature(T)
QActor temperatureagentra context ctxReqAnalysis {
	Plan init normal [
		println("temperatureAgent start")
	]
	switchTo checkTemperature 
	
	Plan checkTemperature [
		delay 5000;
		println("temperatureAgent checking temperature");
		javaRun it.unibo.finalTask2018.ra.temperatureAdapter.getTemperature();
		[ ?? currentTemp(T) ] emit temperature : temperature(T)
	]
	finally repeatPlan
}
// -------------------------- TEMPERATURE AGENT --------------------------

// -------------------------- CLOCK AGENT --------------------------
// Event clock : clock(H,M)
QActor clockagentra context ctxReqAnalysis {
	Plan init normal [ 
		println("clockAgent start")
	]
	switchTo checkTime
	
	Plan checkTime [
		delay 6000; // for testing
		// delay 60000;
		println("clockAgent checking time");
		javaRun it.unibo.finalTask2018.ra.clockAdapter.getTime();
		[ ?? currentTime(H,M) ] emit clock : clock(H,M)
	]
	finally repeatPlan
}
// -------------------------- CLOCK AGENT --------------------------

// -------------------------- HUMAN OPERATOR --------------------------
// Dispatch cmd : cmd(CMD)
QActor humanoperatorra context ctxReqAnalysis {
	Plan init normal [
		println("humanOperator start")
	]
	switchTo sendCmd
	
	Plan sendCmd [
		// for testing
		delay 800;
		forward applra -m cmd : cmd(w(X));
		delay 800;
		forward applra -m cmd : cmd(h(X))
	]
}
// -------------------------- HUMAN OPERATOR --------------------------

// -------------------------- APPLICATION LOGIC --------------------------
QActor applra context ctxReqAnalysis {
	Plan init normal [
		println("appl start")
	]
	switchTo waitForCmd
	
	Plan waitForCmd [ ]
	transition stopAfter 3600000
		whenEvent temperature : temperature(T) do printCurrentEvent,
		whenEvent clock : clock(H,M) do printCurrentEvent,
		whenEvent sonarSensor : sonar(N,D) do printCurrentEvent,
		whenEvent frontSonar : sonar(DISTANCE) do printCurrentEvent,
		whenMsg cmd -> msgReceived
	finally repeatPlan
	
	Plan msgReceived resumeLastPlan [
		printCurrentMessage;
		onMsg cmd: cmd(CMD) -> emit robotCmd : moveRobot(CMD);
		
		// for testing
		delay 400;
		onMsg cmd: cmd(w(X)) -> emit lightCmd : lightCmd(on);
		onMsg cmd: cmd(h(X)) -> emit lightCmd : lightCmd(off)
	]
}
// -------------------------- APPLICATION LOGIC --------------------------

// -------- TEST{ --------
QActor ralogger context ctxReqAnalysis {
	Plan init normal [ ]
	transition stopAfter 3600000
		whenEvent temperature -> dologevent,
		whenEvent clock -> dologevent,
		whenEvent sonarSensor -> dologevent,
		whenEvent frontSonar -> dologevent,
		whenEvent lightCmd -> dologevent,
		whenEvent robotCmd -> dologevent
	finally repeatPlan
		
	Plan dologevent resumeLastPlan [
		onEvent temperature : temperature(T) -> addRule logevent(temperature,temperature(T));
		onEvent clock : clock(H,M) -> addRule logevent(clock,clock(H,M));
		onEvent sonarSensor : sonar(D) -> addRule logevent(sonarSensor,sonar(D));
		onEvent frontSonar : sonar(N,D) -> addRule logevent(frontSonar,sonar(N,D));
		onEvent lightCmd : lightCmd(CMD) -> addRule logevent(lightCmd,lightCmd(CMD));
		onEvent robotCmd : moveRobot(CMD) -> addRule logevent(robotCmd,moveRobot(CMD))
	]
}
// -------- }TEST --------
