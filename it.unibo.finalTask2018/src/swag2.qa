System finalTask2018 
 
Dispatch cmd : cmd(X)
Event usercmd : usercmd(X)
Event temperature : temperature(T)	
Event clock : clock(H,M) 
Event frontSonar : sonar(DISTANCE)
Event sonarSensor : sonar(NAME,DISTANCE)
Event moveRobot : moveRobot(C)
Event lightCmd : lightCmd(STATE)
Event ctrlEvent : ctrlEvent(CATEG,NAME,CMD)
Event inputCtrlEvent : inputEvent(CATEG,NAME,VALUE)

Dispatch swagmsg : usercmd(CMD)

Context ctxSwag2 ip [ host="localhost"  port=8016 ]
EventHandler evswag for usercmd  {
	 forwardEvent swag2pa -m swagmsg // stesso payload
};

// -------------------------- SOFTWARE AGENT 2 --------------------------
QActor swag2pa context ctxSwag2 {
	Rules{
		// for testing
		isCloseTo(S) :-
			sonarDetect(S,D),
			eval(gt,D,0),!,
			eval(lt,D,5).
		
		isCloseTo(S) :-
			sonarDetect(S,D),
			eval(minus,0,D,R),
			eval(lt,R,5).
			
		obstacleDetected(D) :-
			foundObstacle(C), !,
			C2 is C+1,
			retract(foundObstacle(X)),
			assert(foundObstacle(C2)).
		
		obstacleDetected(D) :-
			assert(foundObstacle(1)).
			
		isFixObstacle :- foundObstacle(2).
		
		avoidFixTry :-
			foundFix(C), !,
			C2 is C+1,
			retract(foundFix(C)),
			assert(foundFix(C2)).
			
		avoidFixTry :-
			assert(foundFix(1)).
			
		avoidFixGiveUp :-
			foundFix(2).
	}

	Plan init normal [         
   		println("swag2 start: waiting for start command")
   	]
	transition stopAfter 3600000
		whenMsg swagmsg -> receivedCmd
	finally repeatPlan
   	
   	// R-Start
   	Plan receivedCmd [
   		onMsg swagmsg : usercmd(start) -> {
   			println("ricevuto usercmd(start)");
   			addRule startCmd
   		};
   		onMsg swagmsg : usercmd(halt) -> println("ricevuto usercmd(halt)")
   	]
   	transition whenTime 800 -> notInStartingPoint
    	whenEvent [ ?? startCmd ] sonarSensor -> detectedBySonar
  
  	Plan notInStartingPoint [
  		println("not in starting point");
  		removeRule startCmd
  	]
  	switchTo init
  	
  	Plan detectedBySonar [
		println("detected by a sonar");
		onEvent sonarSensor : sonar(sonar1,D) -> addRule sonarDetect(sonar1,D);
	
		[ !? isCloseTo(sonar1) ] {
			println("close to sonar1");
			selfMsg swagmsg : usercmd(clean)
		}
		else
			println("NOT close to sonar1!");
			
		removeRule sonarDetect(sonar1, D)
	]
	transition whenTime 800 -> notInStartingPoint
		whenMsg swagmsg -> cleaning

	Plan cleaning [
		println("cleaning")
		// do something
	]
    transition stopAfter 3600000 
     	whenEvent frontSonar -> handleFront,
     	whenEvent sonarSensor -> detectedByFinal,
     	whenMsg swagmsg -> receivedCmd
    finally repeatPlan
    
    Plan detectedByFinal [
		println("detected by a sonar");
		onEvent sonarSensor : sonar(sonar2,D) -> addRule sonarDetect(sonar2,D);
	
		[ !? isCloseTo(sonar2) ] {
			println("close to sonar2");
			selfMsg swagmsg : usercmd(halt)
		}
		else
			println("NOT close to sonar2!");
			
		removeRule sonarDetect(sonar2, D)
	]
	transition whenTime 800 -> cleaning
		whenMsg swagmsg -> init
    
//    Plan waitForSonar[  ]
//    transition stopAfter 3600000 
//     	whenEvent frontSonar -> handleFront,
//     	whenEvent sonarSensor -> handleSensor
//    finally repeatPlan	
   	 
	Plan handleFront resumeLastPlan [
		println("handleFront");		
  		printCurrentEvent;
//		onEvent frontSonar : sonar(D) -> forward controllerpa -m cmd : cmd(h(0));
		// NO CONTATORE
		onEvent frontSonar : sonar(D) -> demo obstacleDetected(D); // aumento contatore
	
		// se l'ostacolo non e' fisso, ritento
		[ !? isFixObstacle ]
			println("fix obstacle")
		else {
			println("possible mobile obstacle");
			delay 1000;
			println("DELAY")
			//forward controllerpa -m cmd : cmd(w(0))
		}
	]
    transition whenTime 800 -> avoidMobile
     	whenEvent frontSonar -> avoidFix
//	switchTo [ !? isFixObstacle ] avoidFix
				
//	Plan handleSensor resumeLastPlan[
//  		printCurrentEvent
//  		// testing: robot close to sonars makes some moves
//	]
	
	Plan avoidFix [
		println("avoidFix");
		removeRule foundObstacle(X); // inutile
		// aumento contatore di tentativi
		demo avoidFixTry;
		[ !? avoidFixGiveUp ] selfMsg swagmsg : usercmd(giveup)
		else {
			println("proviamo a girarci intorno");
	//		forward controllerpa -m cmd : cmd(d(0));
			println("turn right");
	//		forward controllerpa -m cmd : cmd(w(0));
	//		delay 500;
			println("forward")	
		}
	]
	transition whenTime 800 -> checkDoor
		whenEvent frontSonar -> failure,
		whenMsg swagmsg -> givingUp
		
	Plan givingUp[
		println("givingUp");
		removeRule foundFix(X)
	]
	switchTo init
		
	Plan avoidMobile [
		println("avoidMobile");
		removeRule foundObstacle(X); // inutile
		println("ok, ostacolo superato")
	]
	switchTo cleaning
	
	Plan checkDoor [
		println("checkDoor");
//		forward controllerpa -m cmd : cmd(h(0));
		println("stop");
//		forward controllerpa -m cmd : cmd(a(0));
		println("turn left")
	]
	transition whenTime 8000 -> doorFound // 800
		whenEvent frontSonar -> avoidFix
	
	Plan doorFound [
		println("doorFound");
		removeRule foundFix(X);
//		forward controllerpa -m cmd : cmd(w(0));
		println("forward");
		delay 400;
//		forward controllerpa -m cmd : cmd(h(0));
		println("stop")
	]
	switchTo goToPrevLevel
	
	Plan goToPrevLevel [
		println("goToPrevLevel")
	]
	
	Plan failure [
		println("failure");
		removeRule foundFix(X);
		println("stop");
		println("prova a sinistra")
	]
	
}
// -------------------------- SOFTWARE AGENT 2 --------------------------

QActor swag2tester context ctxSwag2 {
	Plan init normal [
//		// fail: timeout (not detected by a sonar)
//		delay 4000;
//		emit usercmd : usercmd(start);
//		delay 5000;
//		
//		// fail: timeout (not close to sonar1)
//		emit usercmd : usercmd(start);
//		delay 200;
//		emit sonarSensor : sonar(sonar1, 20);
//		delay 5000;
//	
//		// fail: no start
//		emit usercmd : usercmd(robotgui(w(0)));
//		delay 5000;
//		
		// ok
		delay 2000;
		emit usercmd : usercmd(start);
		delay 200;
		emit sonarSensor : sonar(sonar1, 2);
		delay 1000;
		
		// test stop
		
		emit usercmd : usercmd(halt);		

//		// ostacolo mobile
//		emit frontSonar : sonar(2);
//		delay 2000;
//		
//		// ostacolo fisso
//		emit frontSonar : sonar(2);
//		delay 400;
//		emit frontSonar : sonar(2);
//		delay 2000;
//		emit frontSonar : sonar(2);
		
		println("")

	]
}