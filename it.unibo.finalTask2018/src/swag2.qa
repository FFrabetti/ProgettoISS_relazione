System finalTask2018 

Event usercmd : usercmd(X)
Event frontSonar : sonar(DISTANCE)
Event sonarSensor : sonar(NAME,DISTANCE)
Dispatch swagmsg : cmd(CMD)
Dispatch externalcmd : usercmd(CMD)

// avoidFixRight e avoidFixLeft, ...

/* 
 * externalcmd viene usato per gestire uniformemente sia i click dell'utente per muovere il robot (usercmd)
 * che quelli per avviare terminare la pulizia (cmd)
 * nel controller ci vuole un eventhandler che faccia forwardevent per gli eventi alarm
 * (ossia l'evento alarm : usercmd(X) in cui si trasformano gli eventi cmd quando gli cambi nome)
 */

Context ctxSwag2 ip [ host="localhost"  port=8016 ]
EventHandler evhswag2pa for usercmd {
	forwardEvent swag2pa -m externalcmd
};
// -------------------------- SOFTWARE AGENT 2 --------------------------
QActor swag2pa context ctxSwag2 {
	Rules{
		isCloseTo(S) :-
			sonarDetect(S,D),
			eval(gt,D,0),!,
			eval(lt,D,5).
		
		isCloseTo(S) :-
			sonarDetect(S,D),
			eval(minus,0,D,R),
			eval(lt,R,5).
			
		obstacleDetected(D) :-
			foundObstacle(C), !,
			C2 is C+1,
			retract(foundObstacle(X)),
			assert(foundObstacle(C2)).
		
		obstacleDetected(D) :-
			assert(foundObstacle(1)).
			
		isFixObstacle :- foundObstacle(2).
		
		avoidFixTry :-
			foundFix(C), !,
			C2 is C+1,
			retract(foundFix(C)),
			assert(foundFix(C2)).
			
		avoidFixTry :-
			assert(foundFix(1)).
			
		avoidFixGiveUp :-
			foundFix(2).
		
		decremFoundFix :-
			foundFix(1), !,
			retract(foundFix(1)).
			
		decremFoundFix :-
			foundFix(C), !,
			eval(minus,C,1,R),
			retract(foundFix(C)),
			assert(foundFix(R)).
	}

	Plan init normal [         
   		println("swag2 start: waiting for start command")
   	]
	transition stopAfter 3600000
//		whenMsg swagmsg -> receivedCmd
		whenMsg externalcmd -> receivedCmd
	finally repeatPlan
   	
   	Plan receivedCmd [
		// R-Start
//   		onMsg swagmsg : cmd(start) -> {
//   			println("ricevuto cmd(start)");
//   			addRule startCmd
//   		};
		onMsg externalcmd : usercmd(start) -> {
   			println("ricevuto start");
   			addRule startCmd
   		};
   		// R-Stop
//   	onMsg swagmsg : cmd(halt) -> println("ricevuto cmd(halt)")
   		onMsg externalcmd : usercmd(halt) -> println("ricevuto halt")
   	]
   	transition whenTime 800 -> init
    	whenEvent [ ?? startCmd ] sonarSensor -> detectedBySonar
    	
  	Plan detectedBySonar [
		println("detected by a sonar");
		onEvent sonarSensor : sonar(sonar1,D) -> addRule sonarDetect(sonar1,D);
	
		[ !? isCloseTo(sonar1) ] {
			println("close to sonar1");
			selfMsg swagmsg : cmd(clean) // R-Start
		}
		else
			println("NOT close to sonar1!");
			
		removeRule sonarDetect(sonar1,D)
	]
	transition whenTime 800 -> init
		whenMsg swagmsg -> cleaning

	Plan cleaning [
		println("cleaning")
		// do something
	]
    transition stopAfter 3600000 
     	whenEvent frontSonar -> handleFront,
     	whenEvent sonarSensor -> detectedByFinal,
     	whenMsg externalcmd -> receivedCmd
    
    // R-End
    Plan detectedByFinal [
		println("detected by a sonar");
		onEvent sonarSensor : sonar(sonar2,D) -> addRule sonarDetect(sonar2,D);
	
		[ !? isCloseTo(sonar2) ] {
			println("close to sonar2, end of cleaning");
			selfMsg swagmsg : cmd(halt) // R-End
		}
		else
			println("NOT close to sonar2!");
			
		removeRule sonarDetect(sonar2,D)
	]
	transition whenTime 800 -> cleaning
		whenMsg swagmsg -> init
   
	Plan handleFront [
		println("handleFront");
//		onEvent frontSonar : sonar(D) -> forward controllerpa -m cmd : cmd(h(0));
		println("possible mobile obstacle");
		delay 1000;
		//forward controllerpa -m cmd : cmd(w(0));
		println("provo ad avanzare")
	]
    transition whenTime 8000 -> avoidMobile // TODO 800
   		whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
     	whenEvent frontSonar -> avoidFixRight
     	
     Plan avoidMobile [
		println("avoidMobile");
		println("ok, ostacolo superato")
	]
	switchTo cleaning
	
// ------------------------- DODGE RIGHT -------------------------

	Plan avoidFixRight [
		println("avoidFixRight");
		// aumento contatore di tentativi
		demo avoidFixTry;
		[ !? avoidFixGiveUp ] {
			selfMsg swagmsg : cmd(giveUpRight);
			println("Raggiunti max tentativi a destra")
		} else {
			println("proviamo a girarci intorno");
	//		forward controllerpa -m cmd : cmd(d(0));
			println("turn right");
	//		forward controllerpa -m cmd : cmd(w(0));
	//		delay 500; TODO --> forse possiamo ometterlo ed usare il timout per la transition al suo posto
			println("forward")
		}
	]
	transition whenTime 200 -> checkDoorRight // TODO 800
		whenEvent frontSonar -> failure,
		whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
		whenMsg swagmsg -> switchDirection
	
	Plan checkDoorRight [
		println("checkDoor");
//		forward controllerpa -m cmd : cmd(h(0));
		println("stop");
//		forward controllerpa -m cmd : cmd(a(0));
		println("turn left")
	]
	transition whenTime 8000 -> doorFoundRight // TODO 800
		whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
		whenEvent frontSonar -> avoidFixRight
	
	Plan doorFoundRight [
		println("doorFoundRight");
//		forward controllerpa -m cmd : cmd(w(0));
		println("forward");
//		delay 500;
//		forward controllerpa -m cmd : cmd(h(0));
		println("stop");
//		forward controllerpa -m cmd : cmd(a(0));
		println("left")
	]
	switchTo goToPrevLevelRight
	
	Plan goToPrevLevelRight [
		println("goToPrevLevelRight");
		[ !? foundFix(C) ] {
			demo decremFoundFix;
//			forward controllerpa -m cmd : cmd(w(0));
			println("forward");
//			delay 500;
//			forward controllerpa -m cmd : cmd(h(0));
			println("stop")
		}
		else {
			selfMsg swagmsg : cmd(initialP); // ho raggiunto la posizione di partenza
//			forward controllerpa -m cmd : cmd(d(0));
			println("riprendo la direzione di marcia (RIGHT)")
		}
	]
	transition whenTime 200 -> goToPrevLevelRight // TODO 800
		whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
		whenMsg swagmsg -> cleaning // riprendo a pulire la stanza
	

// ------------------------- DODGE RIGHT -------------------------

	Plan resumeLastPosition [
		println("resume last position");
		[ !? foundFix(C) ] {
			demo decremFoundFix;
//			forward controllerpa -m cmd : cmd(w(0));
			println("forward");
			delay 500;
//			forward controllerpa -m cmd : cmd(h(0));
			println("stop")
		}
		else {
			selfMsg swagmsg : cmd(initialP); // ho raggiunto la posizione di partenza
//			forward controllerpa -m cmd : cmd(d(0));
			println("fronteggio l'invalicabile muro")
		}
	]
	transition whenTime 800 -> resumeLastPosition
		whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
		whenMsg swagmsg -> avoidFixLeft

// ------------------------- DODGE LEFT -------------------------
		
	Plan avoidFixLeft [
		println("avoidFixLeft");
		// aumento contatore di tentativi
		demo avoidFixTry;
		[ !? avoidFixGiveUp ] selfMsg swagmsg : cmd(giveUpLeft)
		else {
			println("proviamo a girarci intorno");
	//		forward controllerpa -m cmd : cmd(a(0));
			println("turn left");
	//		forward controllerpa -m cmd : cmd(w(0));
	//		delay 500; TODO --> forse possiamo ometterlo ed usare il timout per la transition al suo posto
			println("forward")
		}
	]
	transition whenTime 200 -> checkDoorLeft // TODO 800
		whenEvent frontSonar -> givingUp, // se pure a sinistra c'è una parete, la do su!
		whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
		whenMsg swagmsg -> givingUp // tentativi massimi raggiunti
		
	Plan checkDoorLeft [
		println("checkDoorLeft");
//		forward controllerpa -m cmd : cmd(h(0));
		println("stop");
//		forward controllerpa -m cmd : cmd(d(0));
		println("turn right")
	]
	transition whenTime 8000 -> doorFoundLeft // TODO 800
		whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
		whenEvent frontSonar -> avoidFixLeft
		
	Plan doorFoundLeft [
		println("doorFoundLeft");
//		forward controllerpa -m cmd : cmd(w(0));
		println("forward");
		delay 500;
//		forward controllerpa -m cmd : cmd(h(0));
		println("stop");
//		forward controllerpa -m cmd : cmd(d(0));
		println("right")
	]
	switchTo goToPrevLevelLeft
	
	Plan goToPrevLevelLeft [
		println("goToPrevLevelLeft");
		[ !? foundFix(C) ] {
			demo decremFoundFix;
//			forward controllerpa -m cmd : cmd(w(0));
			println("forward");
			delay 500;
//			forward controllerpa -m cmd : cmd(h(0));
			println("stop")
		}
		else {
			selfMsg swagmsg : cmd(initialP); // ho raggiunto la posizione di partenza
//			forward controllerpa -m cmd : cmd(a(0));
			println("riprendo la direzione di marcia (LEFT)")
		}
	]
	transition whenTime 800 -> goToPrevLevelLeft
		whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
		whenMsg swagmsg -> cleaning // riprendo a pulire la stanza
		
// ------------------------- DODGE LEFT -------------------------

	// trovo un'altro muro mentre cerco la porta
	Plan failure [
		println("failure");
//		forward controllerpa -m cmd : cmd(a(0));
//		forward controllerpa -m cmd : cmd(a(0));
		println("ruoto di 180")
	]
	switchTo resumeLastPosition // torno alla posizione iniziale e tento di aggirare l'ostacolo da sinistra

	// ho raggiunto i max tentativi
	Plan switchDirection [
		println("switchDirection");
		demo decremFoundFix; // elimino l'ultimo incremento, quello che ha fatto raggiungere la soglia
//		forward controllerpa -m cmd : cmd(a(0));
		println("ruoto di 90")
	]
	switchTo resumeLastPosition // torno alla posizione iniziale e tento di aggirare l'ostacolo da sinistra

	// tentativi massimi raggiunti
	// R-Obstacle
	Plan givingUp [
		println("givingUp");
		removeRule foundFix(X)
	]
	switchTo init

}
// -------------------------- SOFTWARE AGENT 2 --------------------------

QActor swag2tester context ctxSwag2 {
	Plan init normal [
		// fail: timeout (not detected by a sonar)
		delay 4000;
		emit usercmd : usercmd(start);
		delay 5000;
		
		// fail: timeout (not close to sonar1)
		emit usercmd : usercmd(start);
		delay 200;
		emit sonarSensor : sonar(sonar1, 20);
		delay 5000;
	
		// fail: no start
		emit usercmd : usercmd(robotgui(w(0)));
		delay 5000;
		
		// ok
		delay 2000;
		emit usercmd : usercmd(start);
		delay 200;
		emit sonarSensor : sonar(sonar1, 2);
		delay 1000;
		
		// test stop
		
		emit usercmd : usercmd(halt);

//		// ostacolo mobile
//		emit frontSonar : sonar(2);
//		delay 2000;
		
		// ostacolo fisso, lo schivera' andando a sinistra
//		emit frontSonar : sonar(2);
//		delay 400;
//		emit frontSonar : sonar(2);
//		delay 2000;
//		emit frontSonar : sonar(2);
//		delay 2000;
//		emit frontSonar : sonar(2);
//
//		// fallisce anche a sinistra
//		delay 200;
//		emit frontSonar : sonar(2);

		
		println("")

	]
}
