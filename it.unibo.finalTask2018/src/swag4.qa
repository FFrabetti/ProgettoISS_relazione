System finalTask2018

Event frontSonar : sonar(DISTANCE)
Event sonarSensor : sonar(NAME, DISTANCE)	// da sonar virtuali
Dispatch moveRobot : moveRobot(CMD)

Event usercmd : usercmd(X)
Event ctrlEvent : ctrlEvent(CATEG, NAME, CMD)

Dispatch swagmsg : cmd(CMD) // internal
Dispatch externalcmd : usercmd(CMD)

// obstacle avoidance, no cleaning

Context ctxSwag4 ip [ host="localhost"  port=8066 ]
EventHandler evhswag4 for usercmd {
	forwardEvent swag4 -m externalcmd
};
//Context ctxVirtualRobotNode ip [ host="localhost" port=8822 ] -standalone 

QActor swag4 context ctxSwag4 {
	Rules{
		isCloseTo(S) :-
			sonarDetect(S,D),
			eval(gt,D,0),!,
			eval(lt,D,5).
		
		isCloseTo(S) :-
			sonarDetect(S,D), 	// D<=0
			eval(minus,0,D,R),	// -> R>=0
			eval(lt,R,5).
		
		increment(C) :-
			counter(C,N), !,
			N2 is N+1,
			retract(counter(C,N)),
			assert(counter(C,N2)).
			
		increment(C) :-
			assert(counter(C,1)).
		
		decrement(C) :-
			counter(C, 1), !,
			retract(counter(C, 1)).
		
		decrement(C) :-
			counter(C,N), !,
			eval(minus, N, 1, N2),
			retract(counter(C,N)),
			assert(counter(C,N2)).
		
		avoidFixTry :-
			increment(foundFix).
		
		giveUpLimit(3).
		
		avoidFixGiveUp :-
			giveUpLimit(L),
			counter(foundFix,L).
		
		decremFoundFix :-
			decrement(foundFix).
			
//		exploring(r).
//		exploring(l).

		switchExplorationDir :-
			exploring(r), avoidFixGiveUp, !,
			retract(exploring(r)),
			assert(exploring(l)).
		
		switchExplorationDir :-
			exploring(_), !.
		
		switchExplorationDir :- // nessuno dei due
			assert(exploring(r)).
	}

	Plan init normal [         
   		println("swag4 start");
   		demo consult("./swagtest.pl")
   	]
   	switchTo cleaning
//	transition stopAfter 3600000
//		whenMsg externalcmd -> receivedCmd
//	finally repeatPlan
   	
//   	Plan receivedCmd [
//		// R-Start
//		onMsg externalcmd : usercmd(start) -> {
//   			println("ricevuto start");
//   			addRule startCmd
//   		};
//   		// R-Stop
//   		onMsg externalcmd : usercmd(halt) -> println("ricevuto halt")
//   	]
//   	transition
//   		whenTime 800 -> init
//    	whenEvent [ ?? startCmd ] sonarSensor -> detectedBySonar
//    	
//  	Plan detectedBySonar [
//		println("detected by a sonar");
//		onEvent sonarSensor : sonar(sonar1,D) -> addRule sonarDetect(sonar1,D);
//	
//		[ !? isCloseTo(sonar1) ] {
//			println("close to sonar1");
//			selfMsg swagmsg : cmd(clean) // R-Start
//		}
//		else
//			println("NOT close to sonar1");
//			
//		removeRule sonarDetect(sonar1,D)
//	]
//	transition
//		whenTime 800 -> init
//		whenMsg swagmsg -> cleaning

	Plan cleaning [
		println("cleaning");
		demo addState(cleaning);
		emit ctrlEvent : ctrlEvent(robot,r1,w(0))
		// do something
	]
    transition stopAfter 3600000 
     	whenEvent frontSonar -> handleFront //,
//     	whenEvent sonarSensor -> detectedByFinal,
//     	whenMsg externalcmd -> receivedCmd
    
    // R-End
//    Plan detectedByFinal [
//		println("detected by a sonar");
//		onEvent sonarSensor : sonar(sonar2,D) -> addRule sonarDetect(sonar2,D);
//	
//		[ !? isCloseTo(sonar2) ] {
//			println("close to sonar2, end of cleaning");
//			selfMsg swagmsg : cmd(halt) // R-End
//		}
//		else
//			println("NOT close to sonar2");
//			
//		removeRule sonarDetect(sonar2,D)
//	]
//	transition
//		whenTime 800 -> cleaning
//		whenMsg swagmsg -> init
   
	Plan handleFront [
		println("handleFront");
		demo addState(handleFront);
		emit ctrlEvent : ctrlEvent(robot,r1,h(0));
		println("possible mobile obstacle");
		delay 1000;
		emit ctrlEvent : ctrlEvent(robot,r1,w(0));
		println("provo ad avanzare")
	]
    transition
    	whenTime 800 -> avoidMobile
//   	whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
     	whenEvent frontSonar -> avoidFix // avoidFixRight
     
     Plan avoidMobile [
		println("avoidMobile");
		demo addState(avoidMobile);
		println("ok, ostacolo superato")
	]
	switchTo cleaning
	
//	Plan avoidFix [
//		println("avoidFix");
//		demo switchExplorationDir;
//		[ !? exploring(r) ] selfMsg swagmsg : cmd(exploreR)
//	]
	
	Plan avoidFix [
		println("avoidFix");
		demo addState(avoidFix);
		emit ctrlEvent : ctrlEvent(robot,r1,h(0));
		[ !? exploring(DIR) ] println(exploring(DIR))
		else addRule exploring(r);
		// aumento contatore di tentativi
		demo avoidFixTry;
		[ !? avoidFixGiveUp ] {
			[ !? exploring(l) ] selfMsg swagmsg : cmd(giveUpLeft) // R-Obstacle
			else selfMsg swagmsg : cmd(giveUpRight);
			demo switchExplorationDir;
			println("Raggiunti max tentativi")
		} else {
			delay 800;
			println("proviamo a girarci intorno");
			[ !? exploring(l) ] {
				emit ctrlEvent : ctrlEvent(robot,r1,a(0));
				println("da sinistra")
			}
			else {
				emit ctrlEvent : ctrlEvent(robot,r1,d(0));
				println("da destra")
			};
			delay 2000;
			emit ctrlEvent : ctrlEvent(robot,r1,w(0));
			delay 600; // passo laterale
			emit ctrlEvent : ctrlEvent(robot,r1,h(0));
			delay 2000
		}
	]
	transition
		whenTime 800 -> checkDoor
		whenEvent frontSonar -> failure,
//		whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
		whenMsg swagmsg -> giveUp // esaminare il payload
	
	Plan checkDoor [
		println("checkDoor");
		demo addState(checkDoor);
		[ !? exploring(r) ] emit ctrlEvent : ctrlEvent(robot,r1,a(0))
		else emit ctrlEvent : ctrlEvent(robot,r1,d(0));
		delay 800;
		emit ctrlEvent : ctrlEvent(robot,r1,w(0));
		delay 400; // testata
		emit ctrlEvent : ctrlEvent(robot,r1,h(0));
		delay 2000
	]
	transition
		whenTime 800 -> doorFound
//		whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
		whenEvent frontSonar -> avoidFix
	
	Plan doorFound [
		println("doorFound");
		demo addState(doorFound);
		emit ctrlEvent : ctrlEvent(robot,r1,w(0));
		delay 1000; // supero l'ostacolo
		emit ctrlEvent : ctrlEvent(robot,r1,h(0));
		[ !? exploring(r) ] emit ctrlEvent : ctrlEvent(robot,r1,a(0))
		else emit ctrlEvent : ctrlEvent(robot,r1,d(0))
	]
	switchTo goToPrevLevel
	
	Plan goToPrevLevel [
		println("goToPrevLevel");
		demo addState(goToPrevLevel);
		delay 2000;
		[ !? counter(foundFix,C) ] {
			demo decremFoundFix;
			emit ctrlEvent : ctrlEvent(robot,r1,w(0));
			delay 800; // passo
			emit ctrlEvent : ctrlEvent(robot,r1,h(0))
		}
		else {
			selfMsg swagmsg : cmd(initialP); // raggiunta la posizione di partenza
			[ !? exploring(r) ] emit ctrlEvent : ctrlEvent(robot,r1,d(0))
			else emit ctrlEvent : ctrlEvent(robot,r1,a(0));
			delay 800;
			println("riprendo la direzione di marcia")
		}
	]
	transition
		whenTime 300 -> goToPrevLevel
//		whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
		whenMsg swagmsg -> cleaning // riprendo a pulire la stanza
	
	Plan resumeLastPosition [
		println("resumeLastPosition");
		demo addState(resumeLastPosition);
		delay 2000;
		[ !? counter(foundFix,C) ] {
			demo decremFoundFix;
			emit ctrlEvent : ctrlEvent(robot,r1,w(0));
			delay 800; // passo
			emit ctrlEvent : ctrlEvent(robot,r1,h(0));			
			delay 2000
		}
		else {
			selfMsg swagmsg : cmd(initialP); // raggiunta posizione di partenza
			emit ctrlEvent : ctrlEvent(robot,r1,d(0));
			println("fronteggio l'invalicabile muro")
		}
	]
	transition
		whenTime 800 -> resumeLastPosition
//		whenMsg externalcmd -> receivedCmd, // gestisco i click sui bottoni
		whenMsg swagmsg -> avoidFix  // prova dall'altra parte
	
	// trovo un altro muro mentre cerco la porta
	Plan failure [
		println("failure");
		demo addState(failure);
		[ !? exploring(r) ] {
			println("failure da destra");
			selfMsg swagmsg : cmd(giveUpRight);
			delay 800;
			emit ctrlEvent : ctrlEvent(robot,r1,a(0))
		}
		else {
			println("failure da sinistra");
			selfMsg swagmsg : cmd(giveUpLeft)
		};
		demo switchExplorationDir
	]
	transition stopAfter 3600000
		whenMsg swagmsg -> giveUp

	// ho raggiunto i max tentativi
	Plan giveUp [
		println("giveUp");
		demo addState(giveUp);
		demo decremFoundFix; // elimino l'ultimo incremento, quello che ha fatto raggiungere la soglia
		onMsg swagmsg : cmd(giveUpRight) -> {
			println("giveUpRight");
			delay 800;
			emit ctrlEvent : ctrlEvent(robot,r1,a(0));
			delay 800;
			selfMsg swagmsg : cmd(resumeLastPos)
		};
		onMsg swagmsg : cmd(giveUpLeft) -> { // R-Obstacle
			println("giveUpLeft");
			removeRule foundFix(X);
			removeRule exploring(l)
		}
	]
	transition
		whenTime 800 -> init
		whenMsg swagmsg -> resumeLastPosition // torno alla posizione iniziale e tento di aggirare l'ostacolo da sinistra
}
