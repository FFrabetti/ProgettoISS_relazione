plan(1,init, sentence(true,move(print("swag start: waiting for start command")),'','' ))
plan(2,init, sentence(-  counter( roomLen,C) ,move(print("azzerato conteggio roomLen")),'','' ))
plan(3,init, sentence(-  test ,not here StateMoveNormal,'','' ))
plan(1,receivedCmd, sentence(true,msgswitch(externalcmd, usercmd( X) , move(print(externalcmd( X)))),'','' ))
plan(2,receivedCmd, sentence(true,msgswitch(externalcmd, usercmd( clean) , not here StateMoveNormal),'','' ))
plan(3,receivedCmd, sentence(true,msgswitch(externalcmd, usercmd( halt) , move(print("ricevuto halt"))),'','' ))
plan(1,detectedBySonar, sentence(true,eventswitch(sonarSensor, »sonar( S,D), move(print(detectedBySonar( S,D))) ),'','' ))
plan(2,detectedBySonar, sentence(true,eventswitch(sonarSensor, »sonar( sonar1,D), addRule( sonarDetect( sonar1,D) ) ),'','' ))
plan(3,detectedBySonar, sentence( isCloseTo( sonar1),not here StateMoveNormal,'','' ))
plan(4,detectedBySonar, sentence(true,removeRule( sonarDetect( sonar1,D) ),'','' ))
plan(1,detectedByFinal, sentence(true,eventswitch(sonarSensor, »sonar( S,D), move(print(detectedByFinal( S,D))) ),'','' ))
plan(2,detectedByFinal, sentence(true,eventswitch(sonarSensor, »sonar( sonar2,D), addRule( sonarDetect( sonar2,D) ) ),'','' ))
plan(3,detectedByFinal, sentence( isCloseTo( sonar2),not here StateMoveNormal,'','' ))
plan(4,detectedByFinal, sentence(true,removeRule( sonarDetect( sonar2,D) ),'','' ))
plan(1,startCleaning, sentence(true,move(print("start cleaning")),'','' ))
plan(2,startCleaning, sentence(true,raise( inputCtrlEvent , inputEvent( agent,swag,cleaning) )'),'','' ))
plan(3,startCleaning, sentence(true,forward(controller, cmd,cmd( w( 0))),'','' ))
plan(1,countRoomLen, sentence(true,move(solve,increment( roomLen),0,""),'','' ))
plan(1,forwardCleaning, sentence(true,move(print("cleaning forward")),'','' ))
plan(2,forwardCleaning, sentence( direction( D),move(print(direction( D))),'','' ))
plan(3,forwardCleaning, sentence(true,forward(controller, cmd,cmd( w( 0))),'','' ))
plan(1,leftTurn, sentence(true,move(print("left turn")),'','' ))
plan(2,leftTurn, sentence(true,removeRule( direction( D) ),'','' ))
plan(3,leftTurn, sentence(true,forward(controller, cmd,cmd( h( 0))),'','' ))
plan(4,leftTurn, sentence(true,forward(controller, cmd,cmd( a( 0))),'','' ))
plan(5,leftTurn, sentence( wait( long,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(6,leftTurn, sentence(true,forward(controller, cmd,cmd( w( 0))),'','' ))
plan(7,leftTurn, sentence( wait( medium,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(8,leftTurn, sentence(true,forward(controller, cmd,cmd( h( 0))),'','' ))
plan(9,leftTurn, sentence(true,forward(controller, cmd,cmd( a( 0))),'','' ))
plan(10,leftTurn, sentence( wait( medium,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(1,waitForGodot, sentence(true,move(print("waiting for Godot...")),'','' ))
plan(1,backCleaning, sentence(true,move(print("cleaning back")),'','' ))
plan(2,backCleaning, sentence( direction( D),move(print(direction( D))),'','' ))
plan(3,backCleaning, sentence(true,forward(controller, cmd,cmd( w( 0))),'','' ))
plan(1,rightTurn, sentence(true,move(print("right turn")),'','' ))
plan(2,rightTurn, sentence(true,removeRule( counter( steps,X) ),'','' ))
plan(3,rightTurn, sentence(true,removeRule( direction( D) ),'','' ))
plan(4,rightTurn, sentence(true,forward(controller, cmd,cmd( h( 0))),'','' ))
plan(5,rightTurn, sentence(true,forward(controller, cmd,cmd( d( 0))),'','' ))
plan(6,rightTurn, sentence( wait( long,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(7,rightTurn, sentence(true,forward(controller, cmd,cmd( w( 0))),'','' ))
plan(8,rightTurn, sentence( wait( medium,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(9,rightTurn, sentence(true,forward(controller, cmd,cmd( h( 0))),'','' ))
plan(10,rightTurn, sentence(true,forward(controller, cmd,cmd( d( 0))),'','' ))
plan(11,rightTurn, sentence( wait( medium,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(1,end, sentence(true,move(print("end")),'','' ))
plan(2,end, sentence(true,raise( inputCtrlEvent , inputEvent( agent,swag,idle) )'),'','' ))
plan(3,end, sentence(true,forward(controller, cmd,cmd( h( 0))),'','' ))
plan(1,countSteps, sentence(true,move(solve,increment( steps),0,""),'','' ))
plan(1,frontSonarDetected, sentence(true,move(print("frontSonarDetected")),'','' ))
plan(2,frontSonarDetected, sentence( counter( roomLen,C),move(print(roomLen( C))),'','' ))
plan(3,frontSonarDetected, sentence( counter( steps,N),move(print(steps( N))),'','' ))
plan(4,frontSonarDetected, sentence( isInWallProximity,not here StateMoveNormal,'','' ))
plan(1,selectDirection, sentence(true,move(print("selectDirection")),'','' ))
plan(2,selectDirection, sentence(true,removeRule( exploring( X) ),'','' ))
plan(3,selectDirection, sentence( direction( f),move(print("f")),'','' ))
plan(4,selectDirection, sentence( direction( b),not here StateMoveNormal,'','' ))
plan(1,handleFront, sentence(true,move(print("handleFront")),'','' ))
plan(2,handleFront, sentence(true,forward(controller, cmd,cmd( h( 0))),'','' ))
plan(3,handleFront, sentence(true,move(print("possible mobile obstacle")),'','' ))
plan(4,handleFront, sentence( nwait( medium,2,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(5,handleFront, sentence(true,forward(controller, cmd,cmd( w( 0))),'','' ))
plan(6,handleFront, sentence(true,move(print("provo ad avanzare")),'','' ))
plan(1,avoidMobile, sentence(true,move(print("avoidMobile")),'','' ))
plan(2,avoidMobile, sentence(true,move(print("ok, ostacolo superato")),'','' ))
plan(1,avoidFix, sentence(true,move(print("avoidFix")),'','' ))
plan(2,avoidFix, sentence(true,forward(controller, cmd,cmd( h( 0))),'','' ))
plan(3,avoidFix, sentence( exploring( DIR),move(print(explorng( DIR))),'','' ))
plan(4,avoidFix, sentence(true,move(solve,avoidFixTry,0,""),'','' ))
plan(5,avoidFix, sentence( avoidFixGiveUp,not here StateMoveNormal,'','' ))
plan(1,checkDoor, sentence(true,move(print("checkDoor")),'','' ))
plan(2,checkDoor, sentence( exploring( r),forward(controller, cmd,cmd( a( 0))),'','' ))
plan(3,checkDoor, sentence( nwait( medium,2,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(4,checkDoor, sentence(true,forward(controller, cmd,cmd( w( 0))),'','' ))
plan(5,checkDoor, sentence( wait( medium,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(6,checkDoor, sentence(true,forward(controller, cmd,cmd( h( 0))),'','' ))
plan(7,checkDoor, sentence( wait( medium,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(1,doorFound, sentence(true,move(print("doorFound")),'','' ))
plan(2,doorFound, sentence(true,forward(controller, cmd,cmd( w( 0))),'','' ))
plan(3,doorFound, sentence( nwait( short,5,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(4,doorFound, sentence(true,forward(controller, cmd,cmd( h( 0))),'','' ))
plan(5,doorFound, sentence(true,move(solve,increment( steps,6),0,""),'','' ))
plan(6,doorFound, sentence( exploring( r),forward(controller, cmd,cmd( a( 0))),'','' ))
plan(1,goToPrevLevel, sentence(true,move(print("goToPrevLevel")),'','' ))
plan(2,goToPrevLevel, sentence( nwait( medium,2,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(3,goToPrevLevel, sentence( counter( foundFix,C),not here StateMoveNormal,'','' ))
plan(1,resumeLastPosition, sentence(true,move(print("resume last position")),'','' ))
plan(2,resumeLastPosition, sentence( nwait( medium,2,T),delay( Integer.parseInt(QActorUtils.substituteVars(guardVars,"T").replace("'",""))) ,'','' ))
plan(3,resumeLastPosition, sentence( counter( foundFix,C),not here StateMoveNormal,'','' ))
plan(1,failure, sentence(true,move(print("failure")),'','' ))
plan(2,failure, sentence( exploring( r),not here StateMoveNormal,'','' ))
plan(3,failure, sentence(true,move(solve,switchExplorationDir,0,""),'','' ))
plan(1,giveUp, sentence(true,move(print("giveUp")),'','' ))
plan(2,giveUp, sentence(true,move(solve,decremFoundFix,0,""),'','' ))
plan(3,giveUp, sentence(true,msgswitch(swagmsg, cmd( giveUpRight) , not here StateMoveNormal),'','' ))
plan(4,giveUp, sentence(true,msgswitch(swagmsg, cmd( giveUpLeft) , not here StateMoveNormal),'','' ))
