System finalTask2018            

Event frontSonar : sonar(DISTANCE)				// out
Event lightCmd : lightCmd(STATE)				// in
Event ctrlEvent : ctrlEvent(CATEG,NAME,CMD)		// in
Event local_robotCmd : moveRobot(CMD)			// internal
Dispatch moveRobot : moveRobot(CMD)				// internal

// RICORDA: inserire host addr giusto
Context ctxRealRobotRasp ip [ host="192.168.43.14" port=8888 ]
//Context ctxRealRobotRasp ip [ host="10.0.3.14" port=8888 ]
//Context ctxRealRobotRasp ip [ host="localhost" port=8888 ]
EventHandler evhreal for ctrlEvent {
	emit local_robotCmd fromContent ctrlEvent(robot,r1,CMD) to moveRobot(CMD)
};
EventHandler evhrealbroker for local_robotCmd {
	forwardEvent realrobotrasp -m moveRobot		// stesso payload
};

// RICORDA: inserire host addr giusto
Context ctxAppl ip [ host="192.168.43.3" port=8018 ] -standalone 
//Context ctxAppl ip [ host="10.0.3.3" port=8018 ] -standalone 
//Context ctxAppl ip [ host="localhost" port=8018 ] -standalone 

QActor realrobotrasp context ctxRealRobotRasp {
	Plan init normal [
	    println("realrobotrasp start");
		demo consult("./mapping.pl");
	    [ !? server(ADDR,PORT) ] javaRun it.unibo.raspRobot.robotClient.init(ADDR,PORT)
  	]
    switchTo waitForCmd
		
   	Plan waitForCmd [
   		println("realrobotrasp waiting for commands")
   	]
  	transition stopAfter 3600000
 		whenMsg moveRobot -> execMove
   	finally repeatPlan

  	Plan execMove resumeLastPlan [
//  	printCurrentMessage;
     	onMsg moveRobot : moveRobot(CMD) -> addRule receivedCmd(CMD);
     	[ !? mapCmd(_,OUT) ] javaRun it.unibo.raspRobot.robotClient.sendCmd(OUT);
   		[ ?? receivedCmd(X) ] println(removed(receivedCmd(X)))
   	]
}

QActor ledagent context ctxRealRobotRasp {
	Plan init normal [
   		println("ledagent start");
		demo consult("./mapping.pl");
		delay 1000 // waiting for realrobotrasp to start... (robotClient.init())
   	]
   	switchTo waitForCommand
  
    Plan waitForCommand [ ]
    transition stopAfter 3600000
     	whenEvent lightCmd -> switchLed
    finally repeatPlan
   	 
	Plan switchLed resumeLastPlan [
// 		printCurrentEvent;
 		onEvent lightCmd : lightCmd(CMD) -> addRule receivedCmd(CMD);
 		[ !? mapCmd(_,OUT) ] javaRun it.unibo.raspRobot.robotClient.sendCmd(OUT);
   		[ ?? receivedCmd(X) ] println(removed(receivedCmd(X)))
	]
}

// -------- TEST{ --------
QActor rrrlogger context ctxRealRobotRasp {
	Plan init normal [	]
	transition stopAfter 3600000
		whenEvent frontSonar : sonar(D) do addRule logevent(frontSonar,sonar(D))
	finally repeatPlan
}
// -------- }TEST --------
