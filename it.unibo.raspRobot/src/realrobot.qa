System finalTask2018            

Event frontSonar : sonar(DISTANCE)				// out
Event ctrlEvent : ctrlEvent(CATEG, NAME, CMD)	// in
Event lightCmd : lightCmd(STATE)				// in
Dispatch ctrlMsg : ctrlEvent(CATEG, NAME, CMD)	// internal
Dispatch moveRobot : moveRobot(CMD)				// internal

// RICORDA: inserire host e port giusti
Context ctxRealRobotRasp ip [ host="localhost" port=8888 ]
EventHandler evhnode for ctrlEvent {
	forwardEvent realrobotbroker -m ctrlMsg // stesso payload
};

// RICORDA: inserire host e port giusti
// Context ctxAppl ip [ host="localhost"  port=8018 ] -standalone 

QActor realrobotrasp context ctxRealRobotRasp {
	Plan init normal [
		demo consult("./mapping.pl");
	    println("realrobotrasp start");
	    [ !? server(ADDR,PORT) ] javaRun it.unibo.raspRobot.robotClient.init(ADDR,PORT)
  	]
    switchTo waitForCmd
		
   	Plan waitForCmd [
   		println("realrobotrasp waiting for commands")
   	]
  	transition stopAfter 3600000
 		whenMsg moveRobot -> execMove
   	finally repeatPlan

  	Plan execMove resumeLastPlan [
  		// -------- TEST{ --------
  		onMsg moveRobot : moveRobot(CMD) -> addRule logmsg(moveRobot,moveRobot(CMD));
  		// -------- }TEST --------
  		
//  	printCurrentMessage;
     	onMsg moveRobot : moveRobot(CMD) -> addRule receivedCmd(CMD);
     	[ !? mapCmd(_,OUT) ] javaRun it.unibo.raspRobot.robotClient.sendCmd(OUT);
     	
   		[ ?? receivedCmd(X) ] println(removed(receivedCmd(X)))
   	]
}

QActor realrobotbroker context ctxRealRobotRasp {
	Plan init normal [ ]
	transition stopAfter 3600000
		whenMsg ctrlMsg : ctrlEvent(robot,r1,CMD) do forward realrobotrasp -m moveRobot : moveRobot(CMD)
	finally repeatPlan
}

QActor ledagent context ctxRealRobotRasp {
	Plan init normal [
		demo consult("./mapping.pl");
		delay 1000; // waiting for realrobotrasp to start... (robotClient.init())
   		println("ledagent start")
   	]
   	switchTo waitForCommand
  
    Plan waitForCommand [ ]
    transition stopAfter 3600000
     	whenEvent lightCmd -> switchLed
    finally repeatPlan
   	 
	Plan switchLed resumeLastPlan [
  		// -------- TEST{ --------
  		onEvent lightCmd : lightCmd(CMD) -> addRule logevent(lightCmd,lightCmd(CMD));
  		// -------- }TEST --------
		
// 		printCurrentEvent;
 		onEvent lightCmd : lightCmd(CMD) -> addRule receivedCmd(CMD);
 		[ !? mapCmd(_,OUT) ] javaRun it.unibo.raspRobot.robotClient.sendCmd(OUT);

   		[ ?? receivedCmd(X) ] println(removed(receivedCmd(X)))
	]
}

// -------- TEST{ --------
QActor realrobottest context ctxRealRobotRasp {
	Plan init normal [ ]
	transition stopAfter 3600000
		whenEvent frontSonar -> dologevent
	finally repeatPlan
		
	Plan dologevent resumeLastPlan [
		onEvent frontSonar : sonar(D) -> addRule logevent(frontSonar,sonar(D))
	]
}
// -------- }TEST --------
