System finalTask2018            

Event frontSonar : sonar(DISTANCE)
Event ctrlEvent : ctrlEvent(CATEG, NAME, CMD)
Event lightCmd : lightCmd(STATE)
Dispatch ctrlMsg : ctrlEvent(CATEG, NAME, CMD)
Dispatch moveRobot : moveRobot(CMD)

// RICORDA: inserire host e port giusti
Context ctxRealRobotRasp ip [ host="localhost" port=8888 ]
EventHandler evhnode for ctrlEvent {
	forwardEvent realrobotbroker -m ctrlMsg // stesso payload
};

// RICORDA: inserire host e port giusti
// Context ctxAppl ip [ host="localhost"  port=8018 ] -standalone 

QActor realrobotrasp context ctxRealRobotRasp {
	Plan init normal [
		demo consult("./mapping.pl");
	    println("realrobotrasp start");
	    [ !? server(ADDR,PORT) ] javaRun it.unibo.raspRobot.robotClient.init(ADDR,PORT)
  	]
    switchTo waitForCmd
		
   	Plan waitForCmd [
   		println("realrobotrasp waiting for commands")
   	]
  	transition stopAfter 3600000
 		whenMsg moveRobot -> execMove
   	finally repeatPlan

  	Plan execMove resumeLastPlan [
     	onMsg moveRobot : moveRobot( CMD ) -> addRule receivedCmd(CMD);
     	[ !? mapCmd(_,OUT) ] javaRun it.unibo.raspRobot.robotClient.sendCmd(OUT);
     	
   		[ ?? receivedCmd(X) ] println(removed(receivedCmd(X)))
   	]
}

QActor realrobotbroker context ctxRealRobotRasp {
	Plan init normal [ ]
	transition stopAfter 3600000
		whenMsg ctrlMsg : ctrlEvent(robot,r1,CMD) do forward realrobotrasp -m moveRobot : moveRobot(CMD)
	finally repeatPlan
}

QActor ledagent context ctxRealRobotRasp {
	Plan init normal [
		demo consult("./mapping.pl");
		delay 1000; // waiting for realrobotrasp to start... (robotClient.init())
   		println("ledagent start")
   	]
   	switchTo waitForCommand
  
    Plan waitForCommand[ ]
    transition stopAfter 3600000
     	whenEvent lightCmd -> switchLed
    finally repeatPlan
   	 
	Plan switchLed resumeLastPlan [
 		printCurrentEvent;
 		onEvent lightCmd : lightCmd( CMD ) -> addRule receivedCmd(CMD);
 		[ !? mapCmd(_,OUT) ] javaRun it.unibo.raspRobot.robotClient.sendCmd(OUT);

   		[ ?? receivedCmd(X) ] println(removed(receivedCmd(X)))
	]
}

// for testing
QActor applmocktest context ctxRealRobotRasp {
	Plan init normal [
		delay 5000;
		
		emit ctrlEvent : ctrlEvent(robot,r1,h(0));
		delay 1000;
		emit ctrlEvent : ctrlEvent(robot,r1,a(0));
		delay 1000;
		emit ctrlEvent : ctrlEvent(robot,r1,s(0));
		delay 1000;
		emit ctrlEvent : ctrlEvent(robot,r1,d(0));
		delay 1000;
		emit ctrlEvent : ctrlEvent(robot,r1,w(0));		
		delay 1000;
		
		emit lightCmd : lightCmd(on);
		delay 2000;
		emit lightCmd : lightCmd(blink);
		delay 2000;
		emit lightCmd : lightCmd(off);
		
		println("switch to handle sonar")
	]
	switchTo waitForSonar
	
	Plan waitForSonar [ ]
	 transition stopAfter 3600000
     	whenEvent frontSonar -> handleSonar
    finally repeatPlan
    
 	Plan handleSonar resumeLastPlan [
 		printCurrentEvent
 	]
}
