System ledMbotExecutor
                
Event usercmd 	 		 : usercmd(CMD)  				             
Event bookingRequest     : request(AGENT,NOTIFYME)
Dispatch bookingResponse : response(TOKEN)
Dispatch notify 		 : notify()
Dispatch cmdRequest 	 : cmdRequest(TOKEN)
Event eventTokenCmd		 : eventTokenCmd(usercmd(CMD),TOKEN)
Dispatch badToken        : badToken(TOKEN)
Dispatch moveRover       : usercmd( CMD ) 
Dispatch local_bookingLost : request(AGENT,NOTIFYME)  					   
     
Context ctxVirtualRobotExecutor ip [ host="localhost"   port=8029 ] -standalone     
Context ctxRobotServer ip [ host="localhost"   port=8000 ]
EventHandler evh for bookingRequest -print {	//event-driven ;
 	forwardEvent robotserver -m local_bookingLost  	//from event to message
}; 	 
 
QActor robotserver context ctxRobotServer {   
 	Rules{
 		token(1).
 		newtoken(TKN) :- token(CURRENT), eval(plus,1,CURRENT,TKN).
 	}
 	
	Plan init normal [  println("robotServer START")   ] 
    switchTo doNotify
    
    Plan doNotify [
		[ ?? notify(A) ] sendto A in ctxRobotClient -m notify: notify()
    ]
    switchTo [ !? notify(A) ] doNotify
    //switchTo available
    
    Plan available [
    	removeRule booked;
    	javaRun it.unibo.mbot.led.ledOff()
    ]   
    transition stopAfter 3600000
    	whenEvent bookingRequest -> handleRequest
    	
    Plan handleRequest [
    	onEvent bookingRequest : bookingRequest(A,N) -> {
			[ !? token(T) ] replyToCaller -m bookingResponse : response(T) ;
    		addRule booked
		}
    ]
    transition 
    	whenTime 30000 -> timeExpired ,
    	whenMsg cmdRequest -> waitForCmd ,
    	whenMsg local_bookingLost -> negativeReply
    
    Plan timeExpired [
    	[ !? newtoken(TKN) ] {
    		[ ?? token(CURRENT) ] addRule token(TKN)
    	} 
    ]
    switchTo init
		 
   	Plan waitForCmd [ 
   		onMsg cmdRequest : cmdRequest(TKN) -> {
			[ not !? token(TKN) ] selfMsg badToken : badToken(TKN) 
   			else javaRun it.unibo.mbot.led.ledOn()
		}
   	]
   	transition stopAfter 60000
		whenMsg badToken -> available ,
		whenEvent eventTokenCmd -> forwardCmd ,
		whenMsg local_bookingLost -> negativeReply
   	
   	Plan forwardCmd resumeLastPlan [
   		onEvent eventTokenCmd : eventTokenCmd(usercmd(CMD),TKN) -> {
			[ !? token(TKN) ] emit usercmd : usercmd(CMD)
		}
   	]

	Plan negativeReply resumeLastPlan [
		onMsg local_bookingLost : request(A,N) -> {
			[ !? booked ] sendto A in ctxRobotClient -m bookingResponse : response(0)
		};
		onMsg local_bookingLost : request(A,1) -> {
			[ !? booked ] addRule notify(A)
		}
	]
}  